[{"name":"app.R","content":"\r\n# Based on https://github.com/Sarah-2510/R-Shiny-Project---AIR-QUALITY-INDEX/blob/main/Rshiny%20final.R\r\n# Last update: 2024-08-23\r\n\r\nlibrary(shiny)\r\nlibrary(shinydashboard)\r\nlibrary(DT)\r\nlibrary(leaflet)\r\nlibrary(shinycssloaders)\r\nlibrary(Hmisc)\r\nlibrary(corrplot)\r\nlibrary(PerformanceAnalytics)\r\nlibrary(dplyr)\r\nlibrary(ggplot2)\r\nlibrary(shinythemes)\r\nlibrary(data.table)\r\nlibrary(tidyverse)\r\nlibrary(devtools)\r\n\r\n#  --------------------------------------------------------------------------------------------------------\r\n#                                              READING THE FILES\r\n#  --------------------------------------------------------------------------------------------------------\r\ndevtools::source_url(\"https://raw.githubusercontent.com/jessicajcss/Shiny_RMC/main/01-AQI_calculation_thermo_data.R\")\r\n\r\n\r\nlocalizacao <- read.csv(\"https://raw.githubusercontent.com/jessicajcss/Shiny_RMC/main/data/locais_sensores.csv\",\r\n                        sep = \";\")\r\n\r\n\r\n##### UNITS ACCORDING TO WHO AQG ----\r\nDatafinal <- air_quality_data %>%\r\n  # UNIT CONVERSION: https://www.breeze-technologies.de/blog/air-pollution-how-to-convert-between-mgm3-%C2%B5gm3-ppm-ppb/\r\n  mutate(CO = CO*1.15, #from ppm to mg/m³\r\n         O3 = O3*1.96, #from ppb to ug/m³\r\n         NO2 = NO2*1.88, #from ppb to ug/m³\r\n         SO2 = SO2*2.62, #from ppb to ug/m³\r\n         PM2.5 = PM2.5, # ug/m³\r\n         PM10 = PM10) #ug/m³\r\n\r\nnames(Datafinal)[names(Datafinal) == 'sample_day'] <- 'Date'\r\n\r\n\r\n\r\n##### LOCATION: adding lat and long ----\r\n\r\nthermo_localizacao <- localizacao %>%\r\n  subset((Local == \"Defesa Civil\" | Local == \"Prefeitura\") & Tipo == 'outdoor') %>%\r\n  subset(Cidade == \"Almirante Tamandaré\" | Cidade == \"Rio Branco do Sul\") %>%\r\n  select(Cidade, Lat, Long)\r\n\r\ncolnames(thermo_localizacao) <- c('Cidade', 'Latitude', 'Longitude')\r\n\r\nDatafinal <- left_join(Datafinal, thermo_localizacao, by = \"Cidade\")\r\n\r\nDatafinal <- mutate(Datafinal, Year = format(Date,\"%Y\"))\r\nYear <- unique(Datafinal$Year)\r\nCidade <- unique(Datafinal$Cidade)\r\n\r\n\r\n\r\n\r\n# layout\r\ntitle <- tags$img(src='breathing.ico', height='30', # width='46',\r\n                  \"Qualidade do Ar & Meteorologia\", align = \"left\")\r\n# ---------------------------------------------------------------------------------------------------------\r\n#                                                USER INTERFACE\r\n# ---------------------------------------------------------------------------------------------------------\r\n\r\nui <- dashboardPage(\r\n  skin = 'yellow',\r\n  dashboardHeader(\r\n    title = \"Qualidade do Ar & Meteorologia\",\r\n    titleWidth = 330),\r\n  dashboardSidebar(\r\n    width = 330,\r\n    sidebarMenu(\r\n      menuItem(\"Página Inicial\", tabName = \"home\", icon = icon('home')),\r\n      menuItem((\"Mapa de Sensores\"),tabName = \"dashboard\",icon=icon('map')),\r\n      menuItem(HTML((paste0(\"MP\",tags$sub(\"2.5\"), \" em tempo real\"))), tabName = \"purpleair\",icon = icon('map')),\r\n      menuItem((\"Variação Temporal\"), tabName = \"Line_graph\",icon = icon('chart-line')),\r\n      menuItem((\"Tendências de Poluição\"), tabName = \"year_data\", icon = icon('th')),\r\n      menuItem(\"Dados Brutos\",tabName = \"table\",icon = icon('table'))\r\n    )\r\n  ),\r\n\r\n  dashboardBody(\r\n    #custom css\r\n    tags$head(\r\n      tags$style(\r\n        HTML(\" #compare_state_option,#compare_year_option ,.compare-county-wrapper { display:flex; margin-bottom:-10px;}\r\n    \t\t\t\t#compare_state_option > div, #compare_year_option > div, .compare-county-wrapper > div > div {padding-right: 15px;}\r\n    \t\t\t\t.shiny-output-error:before,.shiny-output-error{visibility: hidden !important;}\r\n    \t\t\t\t.compare-class > .tabbable > .nav-tabs {margin-bottom: 20px !important;}\r\n    \t\t\t\t.box.box-solid.box-primary {border: 1px solid #dd4b39 !important;}\r\n    \t\t\t\t.box.box-solid.box-primary>.box-header { background: #dd4b39 !important; background-color: #dd4b39 !important; }\r\n    \t\t\t\t.sidebar-menu>li {font-size:17px;}\")\r\n      )\r\n    ),\r\n    #--------------------------------------------RAW DATA TAB---------------------------------------------------------\r\n    tabItems(\r\n      tabItem(tabName = \"table\",\r\n              tags$h3('Download de dados', width = 3),\r\n              fluidRow(\r\n                column(3,\r\n                           dateInput(\"start_date\",h3(\"Data inicial\"),\r\n                                     format = \"yyyy-mm-dd\",\r\n                                     value=\"2023-08-10\",\r\n                                     min=\"2023-08-10\",\r\n                                     max=Sys.Date()),\r\n\r\n\r\n                           dateInput(\"end_date\",h3(\"Data final\"),\r\n                                     format = \"yyyy-mm-dd\",\r\n                                     value=Sys.Date(),\r\n                                     min=\"2023-08-10\",\r\n                                     max=Sys.Date())),\r\n                column(9,\r\n                       tableOutput(\"tableData\"))\r\n              ),\r\n              br(),\r\n              br(),\r\n              downloadButton(\"downloadData\"),\r\n\r\n              # box(title = \"Dataset\",solidHeader = TRUE,status = \"primary\",height=\"100%\", width =12,\r\n\r\n               ),\r\n      # ---------------------------------------------HOME TAB-------------------------------------------------------------\r\n\r\n\r\n      tabItem(tabName = \"home\",\r\n              fluidRow(\r\n                column(width=7,align = \"center\",\r\n                       tags$h2(width=5,\"Inventário de material particulado em municípios com atividades minerais estabelecidas\")),\r\n                HTML('<html>\r\n                            <head>\r\n                            <style>\r\n                            table {\r\n                              font-family: arial, sans-serif;\r\n                              border-collapse: collapse;\r\n                              width: 100%;\r\n                            }\r\n\r\n                            td, th {\r\n                              border: 1px solid #dddddd;\r\n                              text-align: left;\r\n                              padding: 8px;\r\n                            }\r\n\r\n                            tr:nth-child(even) {\r\n                              background-color: #dddddd;\r\n                            }\r\n\r\n                            h3,h2{\r\n                              font-weight:bold;\r\n                            }\r\n                            p{\r\n                              font-size: 19px;\r\n                            }\r\n                            <\/style>\r\n                            <\/html>'),\r\n                column(width=5,tags$img(src=\"labair.png\", height=200, align = \"center\"))),\r\n              br(),\r\n              fluidRow(\r\n                column(width=12,tags$h2(width=5,\"Página do Projeto\"))),\r\n              fluidRow(\r\n                box(width=12, tags$iframe(\r\n                  seamless = \"seamless\",\r\n                  src = \"https://rmcqualidadedoar.netlify.app/\",\r\n                  height = 430, width = '100%'))),\r\n              br(),\r\n              fluidRow(12,\r\n                column(width=12,tags$h2(width=5,\"Locais de Monitoramento\")),\r\n                box(title = \"Qualidade do Ar e Meteorológico\",solidHeader = TRUE, status = \"primary\",height=650,\r\n                        width = 12,leafletOutput(height = 590,\"sites\")))\r\n               # box(width=12,HTML('<iframe width=\"100%\" height=\"430\" src=\"https://rmcqualidadedoar.netlify.app/\" clipboard-write; encrypted-media><\/iframe>'))), # IT MUST END WITH <\/iframe>\r\n      ),\r\n\r\n      # -------------------------------------------------MAP PURPLEAIR PAGE------------------------------------------------------------------\r\n\r\n      tabItem(tabName = \"purpleair\",\r\n              fluidRow(\r\n                box(width=12,\r\n                tags$iframe(\r\n                  seamless = \"seamless\",\r\n                  src = \"https://map.purpleair.com/1/lt/mPM25/a525600/p86400/cC5#9.7/-25.3517/-49.2683\",\r\n                  height = 800, width = \"100%\")))\r\n              ),\r\n\r\n\r\n\r\n      # -------------------------------------------------MAP AND BAR GRAPH TAB------------------------------------------------------------------\r\n      tabItem(tabName = \"dashboard\",\r\n              fluidRow(\r\n                column(3,\r\n                       dateInput(\"select_date\",\r\n                                 h3(\"Select Date\"),\r\n                                 format = \"yyyy-mm-dd\",\r\n                                 value=\"2024-06-16\",\r\n                                 min=\"2023-08-10\",\r\n                                 max=Sys.Date()))),\r\n              fluidRow(\r\n                box(title = \"Mapa\",solidHeader = TRUE, status = \"primary\",height=650,\r\n                    width = 6,leafletOutput(height = 590,\"map\")),\r\n                box(title = \"Distribuição dos poluentes\",solidHeader = TRUE, status = \"primary\",width = 6,\r\n                    tabBox(width=12,\r\n                           tabPanel(title=HTML((paste0(\"SO\",tags$sub(\"2\")))),\r\n                                    plotOutput(height = 500, \"plotSO2\")),\r\n                           tabPanel(title=HTML((paste0(\"NO\",tags$sub(\"2\")))),\r\n                                    plotOutput(height = 500, \"plotNO2\")),\r\n                           tabPanel(title=HTML((paste0(\"O\",tags$sub(\"3\")))),\r\n                                    plotOutput(height = 500, \"plotO3\")),\r\n                           tabPanel(title=\"CO\",\r\n                                    plotOutput(height = 500, \"plotCO\")),\r\n                           tabPanel(title=HTML((paste0(\"MP\",tags$sub(\"2.5\")))),\r\n                                    plotOutput(height = 500,\"plotPM25\")),\r\n                           tabPanel(title=HTML((paste0(\"MP\",tags$sub(\"10\")))),\r\n                                    plotOutput(height = 500,\"plotPM10\"))\r\n                    ))),\r\n              br(),\r\n              fluidRow(#DTOutput(outputId = \"tableAQI\", width = '70%')\r\n                       box(title = \"Índice de Qualidade do Ar (IQA)\",\r\n                           footer = \"Referência: <https://aqicn.org/scale/pt/>\",\r\n                           #background = \"yellow\",\r\n                           #width = '100%',  height = 700,\r\n                          # tableOutput(\"tableAQI\")\r\n                #column(\r\n                      width=12,\r\n                       tags$img(width = '90%', src=\"aqi_table.png\", align = \"center\"))\r\n                ),\r\n\r\n      ),\r\n      # ---------------------------------------------------------------LINEGRAPH TAB---------------------------------------------------------\r\n      tabItem(tabName = \"Line_graph\",\r\n              fluidRow(\r\n                column(3,\r\n                       box(title = \"Inputs\",solidHeader = TRUE, status = \"primary\", width =12,height=600,\r\n                           selectInput(\"Cities1\",h3(\"Escolha uma Cidade\"), Cidade, selected = 'Rio Branco do Sul'),\r\n                           radioButtons(\"Poluente\",\r\n                                        \"Poluente:\",\r\n                                        choiceNames = list(\r\n                                          HTML((paste0(\"SO\",tags$sub(\"2\")))),\r\n                                          HTML((paste0(\"NO\",tags$sub(\"2\")))),\r\n                                          HTML((paste0(\"O\",tags$sub(\"3\")))),\r\n                                          \"CO\",\r\n                                          HTML((paste0(\"MP\",tags$sub(\"2.5\")))), #https://shiny.posit.co/r/articles/build/tag-glossary/ || https://shiny.posit.co/r/reference/shiny/latest/radiobuttons || https://stackoverflow.com/questions/67227902/how-to-add-text-formatting-like-superscript-or-subscript-to-a-label-in-a-shiny-a\r\n                                          HTML((paste0(\"MP\",tags$sub(\"10\"))))\r\n                                        ),\r\n                                        choiceValues = list(\r\n                                          \"SO2\", \"NO2\", \"O3\", \"CO\", \"PM2.5\", \"PM10\"\r\n                                        )),\r\n\r\n                           dateInput(\"start_date\",h3(\"Data inicial\"),\r\n                                     format = \"yyyy-mm-dd\",\r\n                                     value=\"2023-08-10\",\r\n                                     min=\"2023-08-10\",\r\n                                     max=Sys.Date()),\r\n\r\n\r\n                           dateInput(\"end_date\",h3(\"Data final\"),\r\n                                     format = \"yyyy-mm-dd\",\r\n                                     value=Sys.Date(),\r\n                                     min=\"2023-08-10\",\r\n                                     max=Sys.Date())\r\n\r\n\r\n\r\n\r\n                       )\r\n                ),\r\n\r\n\r\n                column(9,\r\n                       box(title = \"Série Temporal\",solidHeader=TRUE, status = \"primary\",width = 12,height=600,\r\n                           box(width=12,plotOutput(height = 500,\"plots\")))),\r\n                box(title = \"Concentrações e ventos\",solidHeader = TRUE, status = \"primary\",height=650,\r\n                    width = 12,leafletOutput(height = 590,\"map_polarplot\"))\r\n                ),\r\n      fluidRow(\r\n        box(title=\"Condições Meteorológicas\",\r\n            status=\"primary\",\r\n            solidHeader=TRUE,\r\n            plotOutput(\"dist\"),\r\n            width=8),\r\n        box(title=\"Rosa dos ventos\",\r\n            status=\"primary\",\r\n            solidHeader=TRUE,\r\n            plotOutput(\"wrose\"),\r\n            width=4)\r\n      )\r\n      ),\r\n\r\n\r\n      # -----------------------------------------------------------CORRELATION MATRIX TAB--------------------------------------------------\r\n      tabItem(tabName = \"year_data\",\r\n              fluidRow(column(4,selectInput(\"Cities\", (\"Escolha uma Cidade:\"),Cidade,selected = 'Rio Branco do Sul')),\r\n                       column(8,selectInput(\"years\",(\"Escolha um Ano:\"),Year,selected=\"2024\"))),\r\n              fluidRow(\r\n                column(6,\r\n                       box(title = \"Matriz de Correlação\", solidHeader = TRUE, status = \"primary\", width = 12,\r\n                           tabsetPanel(\r\n                             tabPanel(\"Coeficientes de correlação\", withSpinner(plotOutput(\"corrcoeff\",height = 475))),\r\n                             tabPanel(\"Correlação\", withSpinner(plotOutput(\"corrscatt\",height = 475))),\r\n                             tabPanel(\"Heat map\", withSpinner(plotOutput(\"heatmap\",height = 475)))\r\n\r\n                           )\r\n                       )\r\n\r\n                ),\r\n                column(6,\r\n                       box(title = \"Risco e Prevenção\", solidHeader = TRUE, status = \"primary\", width = 12,\r\n                           tabsetPanel(footer = \"Referência: <https://portal.ct.gov/deep/air/monitoring/aqi-health-effects-statements>\",\r\n                             tabPanel(HTML(c(paste0(\"SO\",tags$sub(\"2\")))), withSpinner(dataTableOutput(\"tabSO2\",height = 475))),\r\n                             tabPanel(HTML(c(paste0(\"NO\",tags$sub(\"2\")))), withSpinner(dataTableOutput(\"tabNO2\",height = 475))),\r\n                             tabPanel(HTML(c(paste0(\"O\",tags$sub(\"3\")))), withSpinner(dataTableOutput(\"tabO3\",height =475))),\r\n                             tabPanel(\"CO\", withSpinner(dataTableOutput(\"tabCO\",height = 475))),\r\n                             tabPanel(HTML(c(paste0(\"MP\",tags$sub(\"2.5\")))), withSpinner(dataTableOutput(\"tabPM25\",height = 475))),\r\n                             tabPanel(HTML(c(paste0(\"MP\",tags$sub(\"10\")))), withSpinner(dataTableOutput(\"tabPM10\",height = 475)))\r\n                           )\r\n\r\n                       ))\r\n              ))\r\n    ),\r\n\r\n\r\n  )\r\n)\r\n\r\n# -------------------------------------------------------------------------------------------------------------------------------------\r\n#                                                   SERVER\r\n# -------------------------------------------------------------------------------------------------------------------------------------\r\n\r\nserver <- function(input, output) {\r\n\r\n  # ----------------------------------------------------------TAB4-----------------------------------------------------------------------\r\n\r\n  # --------------------------------------------------------CORRELATION MATRIX ----------------------------------------------------------\r\n\r\n  output$corrcoeff <- renderPlot({\r\n    mydata2 <- Datafinal %>% filter(Year==input$years, Cidade==input$Cities)\r\n    mydata <- mydata2[,c(3:8)]\r\n    mydata.rcorr = rcorr(as.matrix(mydata))\r\n    mydata.coeff = mydata.rcorr$r\r\n    corrplot(mydata.coeff,method=\"number\")\r\n  })\r\n\r\n  # ------------------------------------------------------SCATTERPLOT CORRELATION-------------------------------------------------------\r\n\r\n  output$corrscatt <- renderPlot({\r\n    mydata2 <- Datafinal %>% filter(Year==input$years, Cidade==input$Cities)\r\n    mydata<-mydata2[,c(3:8)]\r\n    chart.Correlation(mydata, histogram=TRUE, pch=19)\r\n\r\n  })\r\n\r\n  # -----------------------------------------------------------HEAT MAP-----------------------------------------------------------------\r\n\r\n  output$heatmap <- renderPlot({\r\n    mydata2 <- Datafinal %>% filter(Year==input$years, Cidade==input$Cities)\r\n    mydata<-mydata2[,c(3:8)] #ADD METEO\r\n    mydata.rcorr = rcorr(as.matrix(mydata))\r\n    mydata.coeff = mydata.rcorr$r\r\n    palette = colorRampPalette(c(\"green\", \"white\", \"red\")) (20)\r\n    heatmap(x = mydata.coeff, col = palette, symm = TRUE)\r\n  })\r\n\r\n\r\n  # ----------------------------------------------------TABLES FOR POLLUTANT PRECAUTIONS--------------------------------------------------\r\n\r\n  # reading csv file containing precautions from pollutants\r\n\r\nPoltab <- read.csv(\"https://raw.githubusercontent.com/jessicajcss/Shiny_RMC/main/data/pollutants_table.csv\")\r\n\r\n# Table showing PM2.5 cautions\r\n  pm2_5data<-Poltab[Poltab$Poluente == \"PM2.5\", ]\r\n  output$tabPM25 <- DT::renderDataTable(\r\n    DT::datatable({\r\n      pm2_5data[,c(1:3)]\r\n    },\r\n    options = list(searching = FALSE,\r\n                   pageLength = 10,\r\n                   lengthChange = FALSE,\r\n                   order = list(list(1, 'desc'))\r\n    ), rownames = FALSE\r\n\r\n    ))\r\n\r\n  # Table showing PM10 cautions\r\n  pm10data<- Poltab[Poltab$Poluente == \"PM10\", ]\r\n  output$tabPM10 <- DT::renderDataTable(\r\n    DT::datatable({\r\n      pm10data[,c(1:3)]\r\n    },\r\n    options = list(searching = FALSE,\r\n                   pageLength = 10,\r\n                   lengthChange = FALSE,\r\n                   order = list(list(1, 'desc'))\r\n    ), rownames = FALSE\r\n    ))\r\n\r\n  # Table showing NO2 cautions\r\n  no2data<-Poltab[Poltab$Poluente == \"NO2\", ]\r\n  output$tabNO2 <- DT::renderDataTable(\r\n    DT::datatable({\r\n      no2data[,c(1:3)]\r\n    },\r\n    options = list(searching = FALSE,\r\n                   pageLength = 10,\r\n                   lengthChange = FALSE,\r\n                   order = list(list(1, 'desc'))\r\n    ), rownames = FALSE\r\n\r\n    ))\r\n\r\n  # Table showing CO cautions\r\n  codata<-Poltab[Poltab$Poluente == \"CO\", ]\r\n  output$tabCO <- DT::renderDataTable(\r\n    DT::datatable({\r\n      codata[,c(1:3)]\r\n    },\r\n    options = list(searching = FALSE,\r\n                   pageLength = 10,\r\n                   lengthChange = FALSE,\r\n                   order = list(list(1, 'desc'))\r\n    ), rownames = FALSE\r\n\r\n    ))\r\n\r\n  # Table showing SO2 cautions\r\n  so2data<-Poltab[Poltab$Poluente == \"SO2\", ]\r\n  output$tabSO2 <- DT::renderDataTable(\r\n    DT::datatable({\r\n      so2data[,c(1:3)]\r\n    },\r\n    options = list(searching = FALSE,\r\n                   pageLength = 10,\r\n                   lengthChange = FALSE,\r\n                   order = list(list(1, 'desc'))\r\n    ), rownames = FALSE\r\n\r\n    ))\r\n\r\n  # Table showing O3 cautions\r\n  o3data<-Poltab[Poltab$Poluente == \"O3\", ]\r\n  output$tabO3 <- DT::renderDataTable(\r\n    DT::datatable({\r\n      o3data[,c(1:3)]\r\n    },\r\n    options = list(searching = FALSE,\r\n                   pageLength = 10,\r\n                   lengthChange = FALSE,\r\n                   order = list(list(1, 'desc'))\r\n    ), rownames = FALSE\r\n\r\n    ))\r\n\r\n\r\n\r\n\r\n\r\n# ------------------------------------------------------TAB1--------------------------------------------------\r\n\r\n  AQItab <- read.csv(\"https://raw.githubusercontent.com/jessicajcss/Shiny_RMC/04941d3078dd5e53233bab5253fad4ccc178bb7f/data/AQItab.csv\")\r\n\r\n  output$tableAQI <- renderTable({AQItab}, #https://gallery.shinyapps.io/109-render-table/\r\n                                 striped = TRUE,\r\n                                 spacing = 'm',\r\n                                 width = '85%', align = 'c')\r\n\r\n\r\n\r\n   output$PM25<-renderPlot({\r\n    Day <- Datafinal %>%\r\n      mutate(Mês = month(Date, label = T)) %>%\r\n      subset(Cidade == input$Cities & Year == input$years) %>%\r\n      group_by(Mês) %>%\r\n      summarize(Média = mean(PM2.5, na.rm = T))\r\n    df_base <- ggplot(data=Day, aes(x=Mês, y=Média, fill=Média))\r\n    df_base + geom_col() + theme_classic() + ylab('Concentração média (ug/m³)')\r\n  })\r\n\r\n\r\n\r\n\r\n\r\n\r\n  # ----------------------------------------------------MAP FOR AQI--------------------------------------------------\r\n  output$map<-renderLeaflet({\r\n\r\n    # subseting the data according to the date selected\r\n    Day <- Datafinal %>%\r\n      subset(Datafinal$Date == input$select_date)\r\n\r\n    # mutating the data with the popup info for easy access.\r\n    Day<-Day %>%\r\n      mutate(popup_Info=paste(\"Cidade: \",Cidade,\"<\/br>\",\r\n                              \"AQI: \",AQI,\"<\/br>\",\r\n                              \"Condition: \",AQI_Qualidade))\r\n    library(RColorBrewer) #brewer.pal(10, \"Spectral\")\r\n    # gradient based on the AQI level\r\n    risk.bins <- c(0, 50, 100, 150, 200, 300)\r\n    binpal <- colorBin(colorRamp(c(\"#5F0FA2\", \"#814FA7\", \"#F46D43\", \"#FDAE61\", \"yellow\",\"#ABDDA4\")),\r\n                       Datafinal$AQI, bins = risk.bins, pretty = FALSE, reverse = T)\r\n\r\n    # sending the data to the leaflet map to be rendered\r\n    # the markers are provided the pallet colour\r\n    leaflet(data=Day) %>%\r\n      addTiles() %>%\r\n      addCircleMarkers(lat=~Latitude, lng =~Longitude, opacity = 1, fillOpacity = 1,\r\n                       radius = 20, popup = ~popup_Info, color = ~binpal(AQI))\r\n\r\n  })\r\n\r\n# ----------------------------------------------------BAR GRAPHS FOR AQI--------------------------------------------------\r\n  output$plotPM25<-renderPlot({\r\n    Day <- subset(Datafinal,Datafinal$Date == input$select_date)\r\n    df_base <- ggplot(data=Day, aes(x=Cidade, y=PM2.5, fill=AQI_PM25),\r\n                      alpha = 0.8)\r\n    df_base + geom_col() + theme_classic() +\r\n      scale_y_continuous(breaks = seq(0, 30, 5)) +\r\n      geom_hline(aes(yintercept = 15), #,linetype = \"OMS Média Anual\"),\r\n                 linewidth = 0.5,\r\n                 color = \"red3\") +\r\n      annotate(\"text\", x = 0.5, y = 15.5 , color = \"red3\",\r\n               label = expression(\"Referência OMS 24h\"),\r\n               family = \"Fira Sans\", size = 6, hjust = 0) +\r\n      ylab(expression(paste(\"Concentração de \", MP[2.5], \" (\", mu,\"g \", m^-3,\")\")))\r\n  })\r\n\r\n  output$plotPM10<-renderPlot({\r\n    Day <- subset(Datafinal,Datafinal$Date == input$select_date)\r\n    df_base <- ggplot(data=Day, aes(x=Cidade, y=PM10, fill=AQI_PM10),\r\n                      alpha = 0.8)\r\n    df_base + geom_col() + theme_classic() +\r\n      scale_y_continuous(breaks = seq(0, 150, 25)) +\r\n      geom_hline(aes(yintercept = 45), #,linetype = \"OMS Média Anual\"),\r\n                 linewidth = 0.5,\r\n                 color = \"red3\") +\r\n      annotate(\"text\", x = 0.5, y = 47 , color = \"red3\",\r\n               label = expression(\"Referência OMS 24h\"),\r\n               family = \"Fira Sans\", size = 6, hjust = 0) +\r\n      ylab(expression(paste(\"Concentração de \", MP[10], \" (\", mu,\"g \", m^-3,\")\")))  })\r\n\r\n\r\n  output$plotNO2<-renderPlot({\r\n    Day <- subset(Datafinal,Datafinal$Date == input$select_date)\r\n    df_base <- ggplot(data=Day, aes(x=Cidade, y=NO2, fill=AQI_NO2),\r\n                      alpha = 0.8)\r\n    df_base + geom_col() + theme_classic() +\r\n      scale_y_continuous(breaks = seq(0, max(Datafinal$NO2)*5, 25)) +\r\n      geom_hline(aes(yintercept = 25), #,linetype = \"OMS Média Anual\"),\r\n                 linewidth = 0.5,\r\n                 color = \"red3\") +\r\n      annotate(\"text\", x = 0.5, y = 25*1.2 , color = \"red3\",\r\n               label = expression(\"Referência OMS 24h\"),\r\n               family = \"Fira Sans\", size = 6, hjust = 0) +\r\n      ylab(expression(paste(\"Concentração de \", NO[2], \" (\", mu,\"g \", m^-3,\")\")))\r\n  })\r\n\r\n\r\n  output$plotCO<-renderPlot({\r\n    Day <- subset(Datafinal,Datafinal$Date == input$select_date)\r\n    df_base <- ggplot(data=Day, aes(x=Cidade, y=CO, fill=AQI_CO),\r\n                      alpha = 0.8)\r\n    df_base + geom_col() + theme_classic() +\r\n      scale_y_continuous(breaks = seq(0, 5, 1)) +\r\n      geom_hline(aes(yintercept = 4), #,linetype = \"OMS Média Anual\"),\r\n                 linewidth = 0.5,\r\n                 color = \"red3\") +\r\n      annotate(\"text\", x = 0.5, y = 4.1 , color = \"red3\",\r\n               label = expression(\"Referência OMS 8h\"),\r\n               family = \"Fira Sans\", size = 6, hjust = 0) +\r\n      ylab(expression(paste(\"Concentração de CO (mg \", m^-3,\")\")))\r\n  })\r\n\r\n  output$plotSO2<-renderPlot({\r\n    Day <- subset(Datafinal,Datafinal$Date == input$select_date)\r\n    df_base <- ggplot(data=Day, aes(x=Cidade, y=SO2, fill=AQI_SO2),\r\n                      alpha = 0.8)\r\n    df_base + geom_col() + theme_classic() +\r\n      scale_y_continuous(breaks = seq(0, max(Datafinal$SO2)*5, 20)) +\r\n      geom_hline(aes(yintercept = 40), #,linetype = \"OMS Média Anual\"),\r\n                 linewidth = 0.5,\r\n                 color = \"red3\") +\r\n      annotate(\"text\", x = 0.5, y = 47 , color = \"red3\",\r\n               label = expression(\"Referência OMS 24h\"),\r\n               family = \"Fira Sans\", size = 6, hjust = 0) +\r\n      ylab(expression(paste(\"Concentração de \", SO[2], \" (\", mu,\"g \", m^-3,\")\")))\r\n  })\r\n\r\n  output$plotO3<-renderPlot({\r\n    Day <- subset(Datafinal,Datafinal$Date == input$select_date)\r\n    df_base <- ggplot(data=Day, aes(x= Cidade, y=O3, fill=AQI_O3),\r\n                      alpha = 0.8)\r\n    df_base + geom_col() + theme_classic() +\r\n      scale_y_continuous(breaks = seq(0, max(Datafinal$O3)*3, 25)) +\r\n      geom_hline(aes(yintercept = 100), #,linetype = \"OMS Média Anual\"),\r\n                 linewidth = 0.5,\r\n                 color = \"red3\") +\r\n      annotate(\"text\", x = 0.5, y = 102 , color = \"red3\",\r\n               label = expression(\"Referência OMS 8h\"),\r\n               family = \"Fira Sans\", size = 6, hjust = 0) +\r\n      ylab(expression(paste(\"Concentração de \", O[3], \" (\", mu,\"g \", m^-3,\")\")))\r\n  })\r\n\r\n  # ----------------------------------------TAB3---------------------------------------------------------------------\r\n  # ----------------------------------------LINE GRAPHS-------------------------------------------------------------\r\n\r\n  output$plots <- renderPlot({\r\n    Datafinal$Date <- as.Date(Datafinal$Date)\r\n    week_new <- Datafinal[,c(1:8)]\r\n    week_new <- subset(week_new,between(Date, as.Date(input$start_date), as.Date(input$end_date)))\r\n\r\n     week_Cidade <- subset(week_new,Cidade==input$Cities1) %>%\r\n      group_by(Date) %>%\r\n      summarise_at(vars(SO2:PM2.5), mean, na.rm = TRUE)\r\n\r\n    week_Cidade2 <- subset(week_new,Cidade!=input$Cities1) %>%\r\n      group_by(Date) %>%\r\n      summarise_at(vars(SO2:PM2.5), mean, na.rm = TRUE)\r\n\r\n    if(input$Poluente == \"PM2.5\") {x    <- week_Cidade[, c(1,2)]\r\n                                    color <- \"green\"\r\n                                    y    <- week_Cidade2[, c(1,2)]}\r\n    if(input$Poluente == \"PM10\") {x    <- week_Cidade[, c(1,3)]\r\n                                      color <- \"brown\"\r\n                                      y    <- week_Cidade2[, c(1,3)]}\r\n    if(input$Poluente == \"NO2\") {x    <- week_Cidade[, c(1,4)]\r\n                                       color <- \"red\"\r\n                                       y    <- week_Cidade2[, c(1,4)]}\r\n    if(input$Poluente == \"CO\") {x    <- week_Cidade[, c(1,5)]\r\n                                      color <- \"blue\"\r\n                                      y    <- week_Cidade2[, c(1,5)]}\r\n    if(input$Poluente == \"SO2\") {x    <- week_Cidade[, c(1,6)]\r\n                                        color <- \"orange\"\r\n                                        y    <- week_Cidade2[, c(1,6)]}\r\n    if(input$Poluente == \"O3\") {x    <- week_Cidade[, c(1,7)]\r\n                                        color <- \"grey50\"\r\n                                        y    <- week_Cidade2[, c(1,7)]}\r\n\r\n\r\n\r\n    plot(x,type=\"b\",lwd=2,\r\n         xaxt=\"n\", ylim=c(0,max(Datafinal[input$Poluente], na.rm = T)),\r\n         col=color,\r\n         xlab=\"Data\",ylab=\"Concentração (ug/m³)\")\r\n\r\n    lines(y,col=\"black\",type = \"b\",lwd=2)\r\n\r\n    title(input$Cities1, col.main = color)\r\n\r\n    axis.Date(1,\r\n              at=seq(input$start_date, input$end_date, by=\"days\"),\r\n              format = \"%b %d \\n %Y\", cex.axis = .7)\r\n\r\n\r\n\r\n    legend(\"topright\",\r\n           legend=c(expression(SO[\"2\"]),\r\n                    expression(NO[\"2\"]),\r\n                    expression(O[\"3\"]),\r\n                    \"CO\",\r\n                    expression(MP[\"2,5\"]),\r\n                    expression(MP[\"10\"])),\r\n           lty=5,lwd=4,pch=10,col=c(\"orange\",\"red\",\"grey50\",\"blue\",\"green\",\"brown\"),\r\n           ncol=2,bty=\"n\",cex=0.8,\r\n           text.col=c(\"orange\",\"red\",\"grey50\",\"blue\",\"green\",\"brown\")\r\n    )\r\n\r\n\r\n  })\r\n\r\n\r\n  # ----------------------------------------------------MAP FOR polarplots--------------------------------------------------\r\n  #source(\"00-data_wrangling.R\")\r\n\r\n  library(leaflegend)\r\n\r\n  output$sites <- renderLeaflet({\r\n\r\n\r\n    df <- data.frame(Latitute = c(-25.322265201285667 , -25.193976227163617),\r\n                     Longitude = c(-49.1578184144157 , -49.311729610632256),\r\n                     ticker = c(\"Colombo\", \"Rio Branco do Sul\"),\r\n                     Estação = c(\"Estação Meteorológica em Colombo\", \"Estação Meterológica em Rio Branco do Sul\"))\r\n\r\n\r\n    IconSet <- awesomeIconList('Rio Branco do Sul' = makeAwesomeIcon(icon='cloud',\r\n                                                                     squareMarker = F,\r\n                                                                     library='glyphicon',\r\n                                                                     markerColor = 'red', iconColor = 'white'),\r\n                               'Colombo' = makeAwesomeIcon(icon='cloud',\r\n                                                           squareMarker = F,\r\n                                                           library='glyphicon',\r\n                                                           markerColor = 'green', iconColor = 'white'))\r\n    binPal <- colorFactor('black', df$Latitude)\r\n    localizacao <- localizacao %>%\r\n      mutate(site = as.factor(\"Local de Amostragem\"))\r\n\r\n    df %>%\r\n      leaflet() %>%\r\n      addTiles() %>%\r\n      addAwesomeMarkers(lng = ~Longitude, lat = ~Latitute,\r\n                        icon = ~IconSet[ticker],\r\n                        label = ~ Estação) %>%\r\n      addCircleMarkers(lng = localizacao$Long, lat = localizacao$Lat,\r\n                       group = localizacao$Cidade,\r\n                       fillColor = \"black\",\r\n                       color = \"black\",\r\n                       #icon = awesome, # lookup from list based on ticker\r\n                       label = ~ paste(\"Estação de Monitoramento:\", localizacao$Local,\"-\", localizacao$Cidade)) %>%\r\n      addLegendFactor(\r\n        values = ~ localizacao$site,\r\n        pal = binPal,\r\n        #labels = \"Locais de Amostragem\",\r\n        title = \"Pontos de Monitoramento\",\r\n        opacity = 0.5,\r\n        position = \"bottomleft\") %>%\r\n      addLegendAwesomeIcon(iconSet = IconSet,\r\n                           orientation = 'horizontal',\r\n                           title = htmltools::tags$div(\r\n                             style = 'font-size: 12px;',\r\n                             'Estações Meteorológicas'),\r\n                           labelStyle = 'font-size: 0px;',\r\n                           position = 'bottomleft',\r\n                           group = 'Horizontal Legend') %>%\r\n      addLayersControl(\r\n        overlayGroups = localizacao$Cidade,\r\n        options = layersControlOptions(collapsed = FALSE)\r\n      )\r\n\r\n\r\n\r\n  })\r\n\r\n\r\n  output$map_polarplot <- renderLeaflet({\r\n    library(openairmaps)\r\n    meteo <- read.csv(\"https://raw.githubusercontent.com/jessicajcss/Shiny_RMC/main/data/meteo_hour.csv\") %>%\r\n      mutate(data = ifelse(str_detect(date, \":00\"),\r\n                           as.character(date),\r\n                           paste(as.character(date), \"00:00:00\", sep = \" \"))) %>%\r\n      select(-date, -Local) %>%\r\n      subset(site == \"Rio Branco do Sul\" | site == \"Colombo\") %>%\r\n      rename(date = data,\r\n             Cidade = site)  %>%\r\n      mutate(date = as_datetime(date),\r\n             Cidade = case_when(Cidade == \"Colombo\" ~ \"Almirante Tamandaré\",\r\n                                TRUE ~ Cidade))\r\n\r\n    week_new <- left_join(data_thermo_agg, meteo, by = c(\"Cidade\", \"date\"))\r\n    week_new <- week_new %>% mutate(Date = as.Date(date))\r\n    week_new <- subset(week_new, between(Date, as.Date(input$start_date), as.Date(input$end_date)))\r\n\r\n    thermo_localizacao <- localizacao %>%\r\n      subset((Local == \"Defesa Civil\" | Local == \"Prefeitura\") & Tipo == 'outdoor') %>%\r\n      subset(Cidade == \"Almirante Tamandaré\" | Cidade == \"Rio Branco do Sul\") %>%\r\n      select(Cidade, Lat, Long)\r\n\r\n    colnames(thermo_localizacao) <- c('Cidade', 'Latitude', 'Longitude')\r\n\r\n    week_new <- left_join(week_new, thermo_localizacao, by = \"Cidade\")\r\n\r\n    if (nrow(week_new) > 1000) {\r\n    polarMap(week_new,\r\n             pollutant = c(\"SO2\", \"NO2\", \"O3\", \"CO\", \"PM2.5\", \"PM10\"),\r\n             latitude = \"Latitude\",\r\n             longitude = \"Longitude\",\r\n             provider = \"CartoDB.Positron\")\r\n    }\r\n\r\n    if (nrow(week_new) <= 1000) {\r\n      polarMap(week_new,\r\n               statistic = \"nwr\",\r\n               pollutant = c(\"SO2\", \"NO2\", \"O3\", \"CO\", \"PM2.5\", \"PM10\"),\r\n               latitude = \"Latitude\",\r\n               longitude = \"Longitude\",\r\n               provider = \"CartoDB.Positron\")\r\n    }\r\n  })\r\n\r\n\r\n\r\n  output$wrose <- renderPlot({\r\n  meteo <- read.csv(\"https://raw.githubusercontent.com/jessicajcss/Shiny_RMC/main/data/meteo_hour.csv\") %>%\r\n    mutate(data = ifelse(str_detect(date, \":00\"),\r\n                         as.character(date),\r\n                         paste(as.character(date), \"00:00:00\", sep = \" \"))) %>%\r\n    select(-date, -Local) %>%\r\n    subset(site == \"Rio Branco do Sul\" | site == \"Colombo\") %>%\r\n    rename(Date = data,\r\n           Cidade = site)  %>%\r\n    mutate(Date = as_datetime(Date),\r\n           Cidade = case_when(Cidade == \"Colombo\" ~ \"Almirante Tamandaré\",\r\n                              TRUE ~ Cidade))\r\n\r\n  Datafinal$Date <- as.Date(Datafinal$Date)\r\n  week_new <- left_join(Datafinal, meteo, by = c(\"Cidade\", \"Date\"))\r\n  week_new <- subset(week_new, between(Date, as.Date(input$start_date), as.Date(input$end_date)))\r\n\r\n  library(openair)\r\n  week_new %>%\r\n    pollutionRose(pollutant = \"ws\",\r\n                  type = \"Cidade\",\r\n                  extra.args = \"\")\r\n    })\r\n\r\n\r\n  output$dist <- renderPlot({\r\n    meteo <- read.csv(\"https://raw.githubusercontent.com/jessicajcss/Shiny_RMC/main/data/meteo_hour.csv\") %>%\r\n      mutate(data = ifelse(str_detect(date, \":00\"),\r\n                           as.character(date),\r\n                           paste(as.character(date), \"00:00:00\", sep = \" \"))) %>%\r\n      select(-date, -Local) %>%\r\n      subset(site == \"Rio Branco do Sul\" | site == \"Colombo\") %>%\r\n      rename(Date = data,\r\n             Cidade = site)  %>%\r\n      mutate(Date = as_datetime(Date),\r\n             Cidade = case_when(Cidade == \"Colombo\" ~ \"Almirante Tamandaré\",\r\n                                TRUE ~ Cidade))\r\n\r\n    Datafinal$Date <- as.Date(Datafinal$Date)\r\n    week_new <- left_join(Datafinal, meteo, by = c(\"Cidade\", \"Date\"))\r\n    week_new <- subset(week_new, between(Date, as.Date(input$start_date), as.Date(input$end_date)))\r\n\r\n    week_new %>%\r\n      ggplot(aes(x=Date, group=1))+\r\n      geom_bar(aes(y=prec*10,col=\"Precipitação\"),fill=\"green\",\r\n               stat = \"identity\",alpha=0.5)+\r\n      geom_line(aes(y=umid,col=\"Umidade Relativa\"),size=1)+\r\n      geom_line(aes(y=temp,col=\"Temperatura\"),size=1)+\r\n      geom_point(aes(y=umid))+\r\n      geom_point(aes(y=temp))+\r\n      theme_bw()+\r\n      facet_wrap(.~Cidade, scales= \"free_y\", axes = \"all_y\", ncol = 1)+\r\n      theme(axis.text.x = element_text(angle = 0,vjust = 0.5),\r\n            legend.position = \"bottom\")+\r\n      scale_y_continuous(sec.axis = sec_axis(~./10, name= \"Precipitação em mm\"))+\r\n\r\n      labs(x=\"Dia de amostragem\",y=\"Temperatura (ºC) \\n Umidade Relativa (%)\",colour = \"Variável\")+\r\n      scale_colour_manual(values = c(\"darkgreen\",\"red\",\"blue\")) +\r\n      scale_x_datetime(\r\n        labels = scales::label_date_short(),  # automatically efficient date labels\r\n        breaks = \"1 month\")\r\n  })\r\n\r\n\r\n\r\n\r\n  #------------------------------------------------------------TAB5------------------------------------------------------------\r\n  #------------------------------------------------------------RAW DATA------------------------------------------------------------\r\n  output$downloadData <- downloadHandler(\r\n    filename=function(){\r\n      paste(\"DayData\",\"csv\", sep = '.')\r\n    },\r\n    content=function(file){\r\n      Datafinal = data_thermo_converted %>%\r\n        mutate(Date = as.Date(date)) %>%\r\n        subset(Date >= input$start_date & Date <= input$end_date) %>%\r\n        mutate(Date = date) %>%\r\n        select(date, Cidade:PM10)\r\n      write_csv(Datafinal,file)\r\n    }\r\n  )\r\n\r\n  output$tableData <- renderTable(width = \"70%\",\r\n      data_thermo_agg %>%\r\n      mutate(Date = as.Date(date)) %>%\r\n      subset(Date >= input$start_date & Date <= input$end_date) %>%\r\n      mutate(data = as.character(as_datetime(date))) %>%\r\n      select(data, SO2:PM10) %>%\r\n      mutate(date = ifelse(str_detect(data, \":00\"),\r\n                           as.character(data),\r\n                           paste(as.character(data), \"00:00:00\", sep = \" \")),\r\n             data = date) %>%\r\n      select(-date) %>%\r\n      head(n = 20L)\r\n  )\r\n\r\n}\r\n# ------------------------------------------------------------RUNNING THE PROJECT--------------------------------------------------\r\n\r\n\r\n\r\n# Run the application\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
