'PM10', 'PM2.5'))) %>%
dplyr::group_by(Cidade, variable) %>%
dplyr::mutate(Npoints = 1:n() - findInterval(date - hours(w), date),
Mean8 = rollapplyr(value, Npoints, mean, partial = TRUE, fill = NA)) %>% #https://stackoverflow.com/questions/75686593/rolling-mean-of-time-series-with-missing-dates-in-r
dplyr::ungroup() %>%
dplyr::mutate(sample_day = as.Date(date, format = "%Y-%m-%d"),
Mean8 = case_when(Npoints < 8 | (variable != "O3" & variable != "CO") ~ NA, TRUE ~ Mean8)) %>%
dplyr::select(-date, -Npoints)
View(air_quality_data)
w <- 8
air_quality_data <- data %>%
select(Cidade, date, SO2, NO2, O3, CO, PM2.5, PM10) %>%
gather(key = variable, value = value, -c("Cidade", "date"))
View(air_quality_data)
air_quality_data <- data %>%
select(Cidade, date, SO2, NO2, O3, CO, PM2.5, PM10) %>%
gather(key = variable, value = value, -c("Cidade", "date")) %>%
drop_na() %>%
dplyr::mutate(variable = factor(variable,
levels=c('SO2', 'NO2', 'O3', 'CO',
'PM10', 'PM2.5')))
air_quality_data <- data %>%
select(Cidade, date, SO2, NO2, O3, CO, PM2.5, PM10) %>%
gather(key = variable, value = value, -c("Cidade", "date")) %>%
dplyr::mutate(variable = factor(variable,
levels=c('SO2', 'NO2', 'O3', 'CO',
'PM10', 'PM2.5'))) %>%
dplyr::group_by(Cidade, variable) %>%
dplyr::mutate(Npoints = 1:n() - findInterval(date - hours(w), date),
Mean8 = rollapplyr(value, Npoints, mean, partial = TRUE, fill = NA)) %>% #https://stackoverflow.com/questions/75686593/rolling-mean-of-time-series-with-missing-dates-in-r
dplyr::ungroup() %>%
dplyr::mutate(sample_day = as.Date(date, format = "%Y-%m-%d"),
Mean8 = case_when(Npoints < 8 | (variable != "O3" & variable != "CO") ~ NA, TRUE ~ Mean8)) %>%
dplyr::select(-date, -Npoints) %>%
drop_na() %>%
air_quality_data <- air_quality_data %>%
dplyr::group_by(Cidade, sample_day, variable) %>%
dplyr::mutate(value = case_when(variable == "O3" ~ max(Mean8, na.rm = T),
variable == "CO" ~ max(Mean8, na.rm = T),
variable == "SO2" ~ max(value),
variable == "NO2" ~ max(value),
TRUE ~ mean(value, na.rm = T))) # %>%
air_quality_data <- data %>%
select(Cidade, date, SO2, NO2, O3, CO, PM2.5, PM10) %>%
gather(key = variable, value = value, -c("Cidade", "date")) %>%
dplyr::mutate(variable = factor(variable,
levels=c('SO2', 'NO2', 'O3', 'CO',
'PM10', 'PM2.5'))) %>%
dplyr::group_by(Cidade, variable) %>%
dplyr::mutate(Npoints = 1:n() - findInterval(date - hours(w), date),
Mean8 = rollapplyr(value, Npoints, mean, partial = TRUE, fill = NA)) %>% #https://stackoverflow.com/questions/75686593/rolling-mean-of-time-series-with-missing-dates-in-r
dplyr::ungroup() %>%
dplyr::mutate(sample_day = as.Date(date, format = "%Y-%m-%d"),
Mean8 = case_when(Npoints < 8 | (variable != "O3" & variable != "CO") ~ NA, TRUE ~ Mean8)) %>%
dplyr::select(-date, -Npoints) %>%
drop_na() %>%
air_quality_data <- air_quality_data %>%
dplyr::group_by(Cidade, sample_day, variable) %>%
dplyr::mutate(value = case_when(variable == "O3" ~ max(Mean8, na.rm = T),
variable == "CO" ~ max(Mean8, na.rm = T),
variable == "SO2" ~ max(value),
variable == "NO2" ~ max(value),
TRUE ~ mean(value, na.rm = T))) # %>%
air_quality_data <- data %>%
select(Cidade, date, SO2, NO2, O3, CO, PM2.5, PM10) %>%
gather(key = variable, value = value, -c("Cidade", "date")) %>%
dplyr::mutate(variable = factor(variable,
levels=c('SO2', 'NO2', 'O3', 'CO',
'PM10', 'PM2.5'))) %>%
dplyr::group_by(Cidade, variable) %>%
dplyr::mutate(Npoints = 1:n() - findInterval(date - hours(w), date),
Mean8 = rollapplyr(value, Npoints, mean, partial = TRUE, fill = NA)) %>% #https://stackoverflow.com/questions/75686593/rolling-mean-of-time-series-with-missing-dates-in-r
dplyr::ungroup() %>%
dplyr::mutate(sample_day = as.Date(date, format = "%Y-%m-%d"),
Mean8 = case_when(Npoints < 8 | (variable != "O3" & variable != "CO") ~ NA, TRUE ~ Mean8)) %>%
dplyr::select(-date, -Npoints) %>%
drop_na()
View(air_quality_data)
air_quality_data <- data %>%
select(Cidade, date, SO2, NO2, O3, CO, PM2.5, PM10) %>%
gather(key = variable, value = value, -c("Cidade", "date")) %>%
dplyr::mutate(variable = factor(variable,
levels=c('SO2', 'NO2', 'O3', 'CO',
'PM10', 'PM2.5'))) %>%
dplyr::group_by(Cidade, variable) %>%
dplyr::mutate(Npoints = 1:n() - findInterval(date - hours(w), date),
Mean8 = rollapplyr(value, Npoints, mean, partial = TRUE, fill = NA)) %>% #https://stackoverflow.com/questions/75686593/rolling-mean-of-time-series-with-missing-dates-in-r
dplyr::ungroup() %>%
dplyr::mutate(sample_day = as.Date(date, format = "%Y-%m-%d"),
Mean8 = case_when(Npoints < 8 | (variable != "O3" & variable != "CO") ~ NA, TRUE ~ Mean8)) %>%
dplyr::select(-date, -Npoints) %>%
drop_na()
View(air_quality_data)
air_quality_data <- air_quality_data %>%
dplyr::group_by(Cidade, sample_day, variable) %>%
dplyr::mutate(value = case_when(variable == "O3" ~ max(Mean8, na.rm = T),
variable == "CO" ~ max(Mean8, na.rm = T),
variable == "SO2" ~ max(value),
variable == "NO2" ~ max(value),
TRUE ~ mean(value, na.rm = T)))
View(air_quality_data)
View(air_quality_data)
View(air_quality_data)
View(air_quality_data)
View(data)
data %>%
select(Cidade, date, SO2, NO2, O3, CO, PM2.5, PM10) %>%
gather(key = variable, value = value, -c("Cidade", "date")) %>%
dplyr::mutate(variable = factor(variable,
levels=c('SO2', 'NO2', 'O3', 'CO',
'PM10', 'PM2.5'))) %>%
dplyr::group_by(Cidade, variable) %>%
dplyr::mutate(Npoints = 1:n() - findInterval(date - hours(w), date),
Mean8 = rollapplyr(value, Npoints, mean, partial = TRUE, fill = NA)) %>% #https://stackoverflow.com/questions/75686593/rolling-mean-of-time-series-with-missing-dates-in-r
dplyr::ungroup() %>%
dplyr::mutate(sample_day = as.Date(date, format = "%Y-%m-%d"),
Mean8 = case_when(Npoints < 8 | (variable != "O3" & variable != "CO") ~ NA, TRUE ~ Mean8)) %>%
dplyr::select(-date, -Npoints) %>%
dplyr::group_by(Cidade, sample_day, variable) %>%
summariZe(avg = mean(value, na.rm = T),
max8 = max(Mean8),
max = max(value, na.rm = T))
data %>%
select(Cidade, date, SO2, NO2, O3, CO, PM2.5, PM10) %>%
gather(key = variable, value = value, -c("Cidade", "date")) %>%
dplyr::mutate(variable = factor(variable,
levels=c('SO2', 'NO2', 'O3', 'CO',
'PM10', 'PM2.5'))) %>%
dplyr::group_by(Cidade, variable) %>%
dplyr::mutate(Npoints = 1:n() - findInterval(date - hours(w), date),
Mean8 = rollapplyr(value, Npoints, mean, partial = TRUE, fill = NA)) %>% #https://stackoverflow.com/questions/75686593/rolling-mean-of-time-series-with-missing-dates-in-r
dplyr::ungroup() %>%
dplyr::mutate(sample_day = as.Date(date, format = "%Y-%m-%d"),
Mean8 = case_when(Npoints < 8 | (variable != "O3" & variable != "CO") ~ NA, TRUE ~ Mean8)) %>%
dplyr::select(-date, -Npoints) %>%
dplyr::group_by(Cidade, sample_day, variable) %>%
summarize(avg = mean(value, na.rm = T),
max8 = max(Mean8),
max = max(value, na.rm = T))
air_quality_data <- data %>%
select(Cidade, date, SO2, NO2, O3, CO, PM2.5, PM10) %>%
gather(key = variable, value = value, -c("Cidade", "date")) %>%
dplyr::mutate(variable = factor(variable,
levels=c('SO2', 'NO2', 'O3', 'CO',
'PM10', 'PM2.5'))) %>%
dplyr::group_by(Cidade, variable) %>%
dplyr::mutate(Npoints = 1:n() - findInterval(date - hours(w), date),
Mean8 = rollapplyr(value, Npoints, mean, partial = TRUE, fill = NA)) %>% #https://stackoverflow.com/questions/75686593/rolling-mean-of-time-series-with-missing-dates-in-r
dplyr::ungroup() %>%
dplyr::mutate(sample_day = as.Date(date, format = "%Y-%m-%d"),
Mean8 = case_when(Npoints < 8 | (variable != "O3" & variable != "CO") ~ NA, TRUE ~ Mean8)) %>%
dplyr::select(-date, -Npoints)
View(air_quality_data)
air_quality_data <- data %>%
select(Cidade, date, SO2, NO2, O3, CO, PM2.5, PM10) %>%
gather(key = variable, value = value, -c("Cidade", "date")) %>%
dplyr::mutate(variable = factor(variable,
levels=c('SO2', 'NO2', 'O3', 'CO',
'PM10', 'PM2.5'))) %>%
dplyr::group_by(Cidade, variable) %>%
dplyr::mutate(Npoints = 1:n() - findInterval(date - hours(w), date),
Mean8 = rollapplyr(value, Npoints, mean, partial = TRUE, fill = NA)) %>% #https://stackoverflow.com/questions/75686593/rolling-mean-of-time-series-with-missing-dates-in-r
dplyr::ungroup() %>%
dplyr::mutate(sample_day = as.Date(date, format = "%Y-%m-%d"),
Mean8 = case_when(Npoints < 8 | (variable != "O3" & variable != "CO") ~ NA, TRUE ~ Mean8)) %>%
mutate(value = case_when(variable == "O3" ~ Mean8,
variable == "CO" ~ Mean8
TRUE ~ value)) %>%
air_quality_data <- data %>%
select(Cidade, date, SO2, NO2, O3, CO, PM2.5, PM10) %>%
gather(key = variable, value = value, -c("Cidade", "date")) %>%
dplyr::mutate(variable = factor(variable,
levels=c('SO2', 'NO2', 'O3', 'CO',
'PM10', 'PM2.5'))) %>%
dplyr::group_by(Cidade, variable) %>%
dplyr::mutate(Npoints = 1:n() - findInterval(date - hours(w), date),
Mean8 = rollapplyr(value, Npoints, mean, partial = TRUE, fill = NA)) %>% #https://stackoverflow.com/questions/75686593/rolling-mean-of-time-series-with-missing-dates-in-r
dplyr::ungroup() %>%
dplyr::mutate(sample_day = as.Date(date, format = "%Y-%m-%d"),
Mean8 = case_when(Npoints < 8 | (variable != "O3" & variable != "CO") ~ NA, TRUE ~ Mean8)) %>%
mutate(value = case_when(variable == "O3" ~ Mean8,
variable == "CO" ~ Mean8,
TRUE ~ value)) %>%
dplyr::select(-date, -Npoints, -Mean8) %>%
drop_na()
View(air_quality_data)
air_quality_data <- data %>%
select(Cidade, date, SO2, NO2, O3, CO, PM2.5, PM10) %>%
gather(key = variable, value = value, -c("Cidade", "date")) %>%
dplyr::mutate(variable = factor(variable,
levels=c('SO2', 'NO2', 'O3', 'CO',
'PM10', 'PM2.5'))) %>%
dplyr::group_by(Cidade, variable) %>%
dplyr::mutate(Npoints = 1:n() - findInterval(date - hours(w), date),
Mean8 = rollapplyr(value, Npoints, mean, partial = TRUE, fill = NA)) %>% #https://stackoverflow.com/questions/75686593/rolling-mean-of-time-series-with-missing-dates-in-r
dplyr::ungroup() %>%
dplyr::mutate(sample_day = as.Date(date, format = "%Y-%m-%d"),
Mean8 = case_when(Npoints < 8 | (variable != "O3" & variable != "CO") ~ NA, TRUE ~ Mean8)) %>%
mutate(value = case_when(variable == "O3" ~ Mean8,
variable == "CO" ~ Mean8,
TRUE ~ value)) %>%
dplyr::select(-date, -Npoints, -Mean8) %>%
drop_na() %>%
dplyr::group_by(Cidade, sample_day, variable) %>%
dplyr::mutate(value = case_when(variable == "O3" ~ max(value),
variable == "CO" ~ max(value),
variable == "SO2" ~ max(value),
variable == "NO2" ~ max(value),
TRUE ~ mean(value, na.rm = T)))
View(air_quality_data)
air_quality_data <- data %>%
select(Cidade, date, SO2, NO2, O3, CO, PM2.5, PM10) %>%
gather(key = variable, value = value, -c("Cidade", "date")) %>%
dplyr::mutate(variable = factor(variable,
levels=c('SO2', 'NO2', 'O3', 'CO',
'PM10', 'PM2.5'))) %>%
dplyr::group_by(Cidade, variable) %>%
dplyr::mutate(Npoints = 1:n() - findInterval(date - hours(w), date),
Mean8 = rollapplyr(value, Npoints, mean, partial = TRUE, fill = NA)) %>% #https://stackoverflow.com/questions/75686593/rolling-mean-of-time-series-with-missing-dates-in-r
dplyr::ungroup() %>%
dplyr::mutate(sample_day = as.Date(date, format = "%Y-%m-%d"),
Mean8 = case_when(Npoints < 8 | (variable != "O3" & variable != "CO") ~ NA, TRUE ~ Mean8)) %>%
mutate(value = case_when(variable == "O3" ~ Mean8,
variable == "CO" ~ Mean8,
TRUE ~ value)) %>%
dplyr::select(-date, -Npoints, -Mean8) %>%
drop_na() %>%
dplyr::group_by(Cidade, sample_day, variable) %>%
dplyr::mutate(value = case_when(variable == "O3" ~ max(value),
variable == "CO" ~ max(value),
variable == "SO2" ~ max(value),
variable == "NO2" ~ max(value),
TRUE ~ mean(value, na.rm = T))) %>%
unique() %>%
dplyr::select(Cidade, variable, sample_day, value) %>%
tidyr::spread(key = variable, value = value) %>%
dplyr::rowwise() %>%
dplyr::mutate(AQI_SO2 = aqiFromSO2(SO2),
AQI_NO2 = aqiFromNO2(NO2),
AQI_O3 = aqiFromO3(O3),
AQI_CO = aqiFromCO(CO),
AQI_PM25 = aqiFromPM25(PM2.5),
AQI_PM10 = aqiFromPM10(PM10),
AQI = pmax(AQI_SO2, AQI_NO2, AQI_O3, AQI_CO, AQI_PM25, AQI_PM10),
AQI_Qualidade = AQI_Qualidade(AQI))
View(air_quality_data)
runApp('myapp')
input <- data.frame(1)
input <- input %>%
mutate(years = 2023,
Cities = "Rio Branco do Sul",
Cities1 = "Rio Branco do Sul",
select_date = as.Date("2023-08-10"),
start_date = as.Date("2023-08-04"),
end_date = Sys.Date(),
Poluente = "PM10")
localizacao <- read.csv("https://raw.githubusercontent.com/jessicajcss/Shiny_RMC/main/data/locais_sensores.csv",
sep = ";")
##### UNITS ACCORDING TO WHO AQG ----
Datafinal <- air_quality_data %>%
# UNIT CONVERSION: https://www.breeze-technologies.de/blog/air-pollution-how-to-convert-between-mgm3-%C2%B5gm3-ppm-ppb/
mutate(CO = CO*1.15, #from ppm to mg/m³
O3 = O3*1.96, #from ppb to ug/m³
NO2 = NO2*1.88, #from ppb to ug/m³
SO2 = SO2*2.62, #from ppb to ug/m³
PM2.5 = PM2.5, # ug/m³
PM10 = PM10) #ug/m³
names(Datafinal)[names(Datafinal) == 'sample_day'] <- 'Date'
thermo_localizacao <- localizacao %>%
subset((Local == "Defesa Civil" | Local == "Prefeitura") & Tipo == 'outdoor') %>%
subset(Cidade == "Almirante Tamandaré" | Cidade == "Rio Branco do Sul") %>%
select(Cidade, Lat, Long)
colnames(thermo_localizacao) <- c('Cidade', 'Latitude', 'Longitude')
Datafinal <- left_join(Datafinal, thermo_localizacao, by = "Cidade")
Datafinal <- mutate(Datafinal, Year = format(Date,"%Y"))
Year <- unique(Datafinal$Year)
Cidade <- unique(Datafinal$Cidade)
Day <- Datafinal %>%
mutate(Mês = month(Date, label = T)) %>%
subset(Cidade == input$Cities & Year == input$years) %>%
dplyr::group_by(Mês) %>%
summarize(Média = mean(PM2.5, na.rm = T))
Day <- Datafinal %>%
mutate(Mês = month(Date, label = T)) %>%
subset(Cidade == input$Cities & Year == input$years) %>%
dplyr::group_by(Mês) %>%
dplyr::summarize(Média = mean(PM2.5, na.rm = T))
Day <- Datafinal %>%
mutate(Mês = month(Date, label = T))
Datafinal %>%
mutate(Mês = lubridate::month(Date, label = T))
Day <- Datafinal %>%
mutate(Mês = lubridate::month(Date, label = T)) %>%
subset(Cidade == input$Cities & Year == input$years) %>%
dplyr::group_by(Mês) %>%
dplyr::summarize(Média = mean(PM2.5, na.rm = T))
df_base <- ggplot(data=Day, aes(x=Mês, y=Média, fill=Média))
df_base + geom_col() + theme_classic() + ylab('Concentração média (ug/m³)')
# subseting the data according to the date selected
Day <- Datafinal %>%
subset(Datafinal$Date == input$select_date)
# mutating the data with the popup info for easy access.
Day<-Day %>%
mutate(popup_Info=paste("Cidade: ",Cidade,"</br>",
"AQI: ",AQI,"</br>",
"Condition: ",AQI_Qualidade))
#brewer.pal(10, "Spectral")
# gradient based on the AQI level
risk.bins <- c(0, 50, 100, 150, 200, 300)
binpal <- colorBin(colorRamp(c("#5F0FA2", "#814FA7", "#F46D43", "#FDAE61", "yellow","#ABDDA4")),
Datafinal$AQI, bins = risk.bins, reverse = T)
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude, opacity = 1, fillOpacity = 1,
radius = 20, popup = ~popup_Info, color = ~binpal(AQI))
binPal <- colorFactor('black', df$Latitude)
localizacao <- localizacao %>%
mutate(site = as.factor("Local de Amostragem"))
df <- data.frame(Latitute = c(-25.322265201285667 , -25.193976227163617),
Longitude = c(-49.1578184144157 , -49.311729610632256),
ticker = c("Colombo", "Rio Branco do Sul"),
Estação = c("Estação Meteorológica em Colombo", "Estação Meterológica em Rio Branco do Sul"))
IconSet <- awesomeIconList('Rio Branco do Sul' = makeAwesomeIcon(icon='cloud',
squareMarker = F,
library='glyphicon',
markerColor = 'red', iconColor = 'white'),
'Colombo' = makeAwesomeIcon(icon='cloud',
squareMarker = F,
library='glyphicon',
markerColor = 'green', iconColor = 'white'))
binPal <- colorFactor('black', df$Latitude)
localizacao <- localizacao %>%
mutate(site = as.factor("Local de Amostragem"))
df %>%
leaflet() %>%
addTiles() %>%
addAwesomeMarkers(lng = ~Longitude, lat = ~Latitute,
icon = ~IconSet[ticker],
label = ~ Estação) %>%
addCircleMarkers(lng = localizacao$Long, lat = localizacao$Lat,
group = localizacao$Cidade,
fillColor = "black",
color = "black",
#icon = awesome, # lookup from list based on ticker
label = ~ paste("Estação de Monitoramento:", localizacao$Local,"-", localizacao$Cidade)) %>%
addLegendFactor(
values = ~ localizacao$site,
pal = binPal,
#labels = "Locais de Amostragem",
title = "Pontos de Monitoramento",
opacity = 0.5,
position = "bottomleft") %>%
addLegendAwesomeIcon(iconSet = IconSet,
orientation = 'horizontal',
title = htmltools::tags$div(
style = 'font-size: 12px;',
'Estações Meteorológicas'),
labelStyle = 'font-size: 0px;',
position = 'bottomleft',
group = 'Horizontal Legend') %>%
addLayersControl(
overlayGroups = localizacao$Cidade,
options = layersControlOptions(collapsed = FALSE)
) %>%
addProviderTiles(
"CartoDB.Positron",
group = "CartoDB.Positron"
) %>%
addProviderTiles(
"Esri.WorldImagery",
group = "Esri.WorldImagery"
) %>%
# add a layers control
addLayersControl(
baseGroups = c("CartoDB.Positron", "Esri.WorldImagery"
),
# position it on the topleft
position = "bottomleft"
)
meteo <- read.csv("https://raw.githubusercontent.com/jessicajcss/Shiny_RMC/main/data/meteo_hour.csv")
meteo <- meteo %>%
mutate(data = ifelse(str_detect(date, ":00"),
as.character(date),
paste(as.character(date), "00:00:00", sep = " "))) %>%
select(-date, -Local) %>%
mutate(data = ymd_hms(data, tz = "America/Sao_Paulo"))
meteo <- meteo %>%
subset(site == "Rio Branco do Sul" | site == "Colombo") %>%
rename(date = data,
Cidade = site)  %>%
mutate(date = as_datetime(date),
Cidade = case_when(Cidade == "Colombo" ~ "Almirante Tamandaré",
TRUE ~ Cidade))
week_new <- left_join(data_thermo_agg, meteo, by = c("Cidade", "date"))
week_new <- week_new %>% mutate(Date = as.Date(date))
week_new <- subset(week_new, between(Date, as.Date(input$start_date), as.Date(input$end_date)))
thermo_localizacao <- localizacao %>%
subset((Local == "Defesa Civil" | Local == "Prefeitura") & Tipo == 'outdoor') %>%
subset(Cidade == "Almirante Tamandaré" | Cidade == "Rio Branco do Sul") %>%
select(Cidade, Lat, Long)
colnames(thermo_localizacao) <- c('Cidade', 'Latitude', 'Longitude')
week_new <- left_join(week_new, thermo_localizacao, by = "Cidade")
polarMap(week_new,
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude",
key = TRUE,
provider = "CartoDB.Positron")
Datafinal$Date <- as.Date(Datafinal$Date)
meteo <- meteo %>%
mutate(data = ifelse(str_detect(date, ":00"),
as.character(date),
paste(as.character(date), "00:00:00", sep = " "))) %>%
select(-date, -Local) %>%
subset(site == "Rio Branco do Sul" | site == "Colombo") %>%
rename(Date = data,
Cidade = site)  %>%
mutate(Date = as_datetime(Date),
Cidade = case_when(Cidade == "Colombo" ~ "Almirante Tamandaré",
TRUE ~ Cidade))
Datafinal$Date <- as.Date(Datafinal$Date)
meteo <- read.csv("https://raw.githubusercontent.com/jessicajcss/Shiny_RMC/main/data/meteo_hour.csv")
meteo <- meteo %>%
mutate(data = ifelse(str_detect(date, ":00"),
as.character(date),
paste(as.character(date), "00:00:00", sep = " "))) %>%
select(-date, -Local) %>%
mutate(data = ymd_hms(data, tz = "America/Sao_Paulo"))
meteo <- meteo %>%
subset(site == "Rio Branco do Sul" | site == "Colombo") %>%
rename(Date = data,
Cidade = site)  %>%
mutate(Date = as_datetime(Date),
Cidade = case_when(Cidade == "Colombo" ~ "Almirante Tamandaré",
TRUE ~ Cidade))
Datafinal$Date <- as.Date(Datafinal$Date)
week_new <- left_join(Datafinal, meteo, by = c("Cidade", "Date"))
week_new <- subset(week_new, between(Date, as.Date(input$start_date), as.Date(input$end_date)))
week_new %>%
pollutionRose(pollutant = "ws",
type = "Cidade")
meteo <- meteo %>%
subset(site == "Rio Branco do Sul" | site == "Colombo") %>%
rename(Date = data,
Cidade = site)  %>%
mutate(Date = as_datetime(Date),
Cidade = case_when(Cidade == "Colombo" ~ "Almirante Tamandaré",
TRUE ~ Cidade))
Datafinal$Date <- as.Date(Datafinal$Date)
week_new <- left_join(Datafinal, meteo, by = c("Cidade", "Date"))
week_new <- subset(week_new, between(Date, as.Date(input$start_date), as.Date(input$end_date)))
week_new %>%
ggplot(aes(x=Date, group=1))+
geom_bar(aes(y=prec*10,col="Precipitação"),fill="green",
stat = "identity",alpha=0.5)+
geom_line(aes(y=umid,col="Umidade Relativa"),size=1)+
geom_line(aes(y=temp,col="Temperatura"),size=1)+
geom_point(aes(y=umid))+
geom_point(aes(y=temp))+
theme_bw()+
facet_wrap(.~Cidade, scales= "free_y", axes = "all_y", ncol = 1)+
theme(axis.text.x = element_text(angle = 0,vjust = 0.5),
legend.position = "bottom")+
scale_y_continuous(sec.axis = sec_axis(~./10, name= "Precipitação em mm"))+
labs(x="Dia de amostragem",y="Temperatura (ºC) \n Umidade Relativa (%)",colour = "Variável")+
scale_colour_manual(values = c("darkgreen","red","blue")) +
scale_x_datetime(
labels = scales::label_date_short(),  # automatically efficient date labels
breaks = "1 month")
runApp('myapp')
# https://www.appsilon.com/post/how-to-share-r-shiny-apps
library(shiny)
#saving shinyapp as app.R into myapp folder to generate an HTML shiny app 'inside' Github.
shinylive::export(appdir = "myapp", destdir = "docs")
# checking
httpuv::runStaticServer("docs/", port=8008)
gitcreds::gitcreds_set()
shinyAppAuth0()
shiny::shinyAppDir()
curl -u 38BF81C410654F4CACDAE71272D212134F6A4CE7F5C336DF:2pMA9bQ8O0iMeb6sxUZnVC1bQLXdjEFnfIGbZOKA -I https://api.github.com/meta
runApp('myapp')
runApp('myapp')
shiny::runApp('myapp')
runApp('myapp')
runApp('myapp')
#saving shinyapp as app.R into myapp folder to generate an HTML shiny app 'inside' Github.
shinylive::export(appdir = "myapp", destdir = "docs")
usethis::browse_github_pat()
usethis::edit_r_environ()
rsconnect::deployApp('./myapp')
### Github error 403 on Shinyapps
usethis::create_github_token()
usethis::edit_r_environ()
remotes::install_github()
remotes::install_github()
shiny::runApp('myapp')
renv::activate()
remotes::install_github()
install.packages("remotes")
usethis::edit_r_environ()
install.packages("usethis")
usethis::edit_r_environ()
renv::status()
remotes::install_github()
remotes::install_github("jessicajcss/Shiny_RMC")
usethis::edit_r_environ()
remotes::install_github("jessicajcss/Shiny_RMC")
usethis::edit_r_environ()
usethis::edit_r_environ()
remotes::install_github("jessicajcss/Shiny_RMC")
