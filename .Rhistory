by_day <- by_hour %>%
group_by(Cidade, date) %>%
summarise(umid = mean(umid, na.rm = T))
by_hour %>%
ggplot(aes(x=Date, group=1))+
geom_bar(aes(y=prec*10,col="Precipitação"),fill="green",
stat = "identity",alpha=0.5)+
geom_line(aes(x=by_day$date, y=by_day$umid,col="Umidade Relativa"),size=1)
by_day <- by_hour %>%
group_by(Cidade, date) %>%
summarise(umid = mean(umid, na.rm = T)) %>%
left_join(by_hour, ., by = c(Cidade, date))
by_day %>%
left_join(by_hour, ., by = c(Cidade, date))
by_day <- by_hour %>%
dplyr::group_by(Cidade, date) %>%
dplyr::summarize(umid = mean(umid, na.rm = T))
by_day %>%
left_join(by_hour[,c(1,2)], ., by = c(Cidade, date))
by_day %>%
left_join(by_hour[,c(1,2,15)], ., by = c('Cidade', 'date'))
by_day <- by_hour %>%
dplyr::group_by(Cidade, date) %>%
dplyr::summarize(umid = mean(umid, na.rm = T)) %>%
left_join(by_hour[,c(1,2,15)], ., by = c('Cidade', 'date'))
View(by_day)
by_hour %>%
ggplot(aes(x=Date, group=1))+
geom_bar(aes(y=prec*10,col="Precipitação"),fill="green",
stat = "identity",alpha=0.5)+
geom_line(aes(x=by_day$Date, y=by_day$umid,col="Umidade Relativa"),size=1)+
geom_line(aes(y=temp,col="Temperatura"),size=1)+
geom_point(aes(x=by_day$Date, y=by_day$umid))+
geom_point(aes(y=temp))+
theme_bw()+
facet_wrap(.~Cidade, scales= "free_y", axes = "all_y", ncol = 1)+
theme(axis.text.x = element_text(angle = 0,vjust = 0.5),
legend.position = "bottom")+
scale_y_continuous(sec.axis = sec_axis(~./10, name= "Precipitação em mm")) +
labs(x="Dia de amostragem",y="Temperatura (ºC) \n Umidade Relativa (%)",colour = "Variável")+
scale_colour_manual(values = c("darkgreen","red","blue")) +
scale_x_datetime(
labels = scales::label_date_short(),  # automatically efficient date labels
breaks = "1 month")
View(by_day)
by_day <- by_hour %>%
dplyr::group_by(Cidade, date) %>%
dplyr::summarize(umid = mean(umid, na.rm = T)) %>%
left_join(by_hour[,c(1,2,15)], ., by = c('Cidade', 'date')) %>%
mutate(Date = date + h(12))
by_day <- by_hour %>%
dplyr::group_by(Cidade, date) %>%
dplyr::summarize(umid = mean(umid, na.rm = T)) %>%
left_join(by_hour[,c(1,2,15)], ., by = c('Cidade', 'date')) %>%
mutate(Date = date + hour(12))
by_day <- by_hour %>%
dplyr::group_by(Cidade, date) %>%
dplyr::summarize(umid = mean(umid, na.rm = T)) %>%
left_join(by_hour[,c(1,2,15)], ., by = c('Cidade', 'date')) %>%
mutate(Date = ymd(date) + hour(12))
by_day <- by_hour %>%
dplyr::group_by(Cidade, date) %>%
dplyr::summarize(umid = mean(umid, na.rm = T)) %>%
left_join(by_hour[,c(1,2,15)], ., by = c('Cidade', 'date')) %>%
mutate(Date = ymd(date) + hours(12))
by_hour %>%
ggplot(aes(x=Date, group=1))+
geom_bar(aes(y=prec*10,col="Precipitação"),fill="green",
stat = "identity",alpha=0.5)+
geom_line(aes(x=by_day$Date, y=by_day$umid,col="Umidade Relativa"),size=1)+
geom_line(aes(y=temp,col="Temperatura"),size=1)+
geom_point(aes(x=by_day$Date, y=by_day$umid))+
geom_point(aes(y=temp))+
theme_bw()+
facet_wrap(.~Cidade, scales= "free_y", axes = "all_y", ncol = 1)+
theme(axis.text.x = element_text(angle = 0,vjust = 0.5),
legend.position = "bottom")+
scale_y_continuous(sec.axis = sec_axis(~./10, name= "Precipitação em mm")) +
labs(x="Dia de amostragem",y="Temperatura (ºC) \n Umidade Relativa (%)",colour = "Variável")+
scale_colour_manual(values = c("darkgreen","red","blue")) +
scale_x_datetime(
labels = scales::label_date_short(),  # automatically efficient date labels
breaks = "1 month")
TRUE ~ Cidade))
tz(meteo$Date)
runApp('myapp')
runApp('myapp')
DT::datatable({
pm2_5data[,c(1:3)]
},
options = list(searching = FALSE,
pageLength = 10,
lengthChange = FALSE,
order = list(list(1, 'desc'))
), rownames = FALSE
)
Datafinal %>%
subset(Date == input$select_date)
# mutating the data with the popup info for easy access.
Day <- Day %>%
mutate(popup_Info=paste("Cidade: ",Cidade,"</br>",
"AQI: ",AQI,"</br>",
"Condition: ",AQI_Qualidade))
Datafinal %>%
subset(Date == input$select_date) %>%
mutate(popup_Info=paste("Cidade: ",Cidade,"</br>",
"AQI: ",AQI,"</br>",
"Condition: ",AQI_Qualidade))
leaflet(data = Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude, opacity = 1, fillOpacity = 1,
radius = 20, popup = ~popup_Info, color = ~binpal(AQI))
Day <- Datafinal %>%
subset(Date == input$select_date) %>%
mutate(popup_Info=paste("Cidade: ",Cidade,"</br>",
"AQI: ",AQI,"</br>",
"Condition: ",AQI_Qualidade))
# gradient based on the AQI level
risk.bins <- c(0, 50, 100, 150, 200, 300)
binpal <- colorBin(colorRamp(c("#5F0FA2", "#814FA7", "#F46D43", "#FDAE61", "yellow","#ABDDA4")),
Datafinal$AQI, bins = risk.bins, reverse = T)
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data = Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude, opacity = 1, fillOpacity = 1,
radius = 20, popup = ~popup_Info, color = ~binpal(AQI))
runApp('myapp')
runApp('myapp')
runApp('myapp')
runApp('myapp')
runApp('myapp')
runApp('myapp')
runApp('myapp')
runApp('myapp')
by_hour <- reactive ({
meteo %>%
mutate(date = Date) %>%
left_join(data_thermo_agg, ., by = c("Cidade", "date")) %>%
mutate(date = as.Date(Date))  %>%
subset(., between(date,
as.Date(input$start_date),
as.Date(input$end_date))) %>%
left_join(., thermo_localizacao, by = "Cidade")
})
polarMap(by_hour,
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude",
key = TRUE,
provider = "CartoDB.Positron")
output$wrose <- renderPlot({
by_hour() %>%
pollutionRose(pollutant = "ws",
type = "Cidade")
by_hour() %>%
pollutionRose(pollutant = "ws",
type = "Cidade")
runApp('myapp')
runApp('myapp/app_reactive.R')
runApp('myapp')
runApp('myapp')
runApp('myapp/app_reactive.R')
usethis::use_git_ignore(".secrets")
usethis::use_git_ignore("*/.secrets")
# Based on https://github.com/Sarah-2510/R-Shiny-Project---AIR-QUALITY-INDEX/blob/main/Rshiny%20final.R
# Last update: 2024-08-23
gs4_auth(cache = ".secrets", email = "jessicajcss@ufpr.com")
runApp('myapp/app_reactive.R')
runApp('myapp/app_reactive.R')
runApp('myapp/app_reactive.R')
runApp('myapp/app_reactive.R')
runApp('myapp/app_reactive.R')
runApp('myapp')
runApp('myapp')
runApp('myapp/app_reactive.R')
runGist("41f1670fb03e5af65e56429638166bcb")
runApp('myapp')
runApp('myapp')
meteo %>%
mutate(date = Date) %>%
left_join(data_thermo_agg, ., by = c("Cidade", "date")) %>%
mutate(date = as.Date(Date, tz = "America/Sao_Paulo"))  %>%
subset(., between(date,
as.Date(input$start_date2, tz = "America/Sao_Paulo"),
as.Date(input$end_date2, tz = "America/Sao_Paulo"))) %>%
left_join(., thermo_localizacao, by = "Cidade") %>%
dplyr::group_by(Cidade, date) %>%
dplyr::summarize(umid = mean(umid, na.rm = T)) %>%
left_join(by_hour[,c(1,2,15)], ., by = c('Cidade', 'date')) %>%
mutate(Date = ymd(date) + hours(12)) %>%
ggplot(aes(x=Date, group=1))+
geom_bar(aes(y=prec*10,col="Precipitação"),fill="green",
stat = "identity",alpha=0.5)+
geom_line(aes(x=by_day$Date, y=by_day$umid,col="Umidade Relativa"),size=1)+
geom_line(aes(y=temp,col="Temperatura"),size=1)+
geom_point(aes(x=by_day$Date, y=by_day$umid))+
geom_point(aes(y=temp))+
theme_bw()+
facet_wrap(.~Cidade, scales= "free_y", axes = "all_y", ncol = 1)+
theme(axis.text.x = element_text(angle = 0,vjust = 0.5),
legend.position = "bottom")+
scale_y_continuous(sec.axis = sec_axis(~./10, name= "Precipitação em mm")) +
labs(x="Dia de amostragem",y="Temperatura (ºC) \n Umidade Relativa (%)",colour = "Variável")+
scale_colour_manual(values = c("darkgreen","red","blue")) +
scale_x_datetime(
labels = scales::label_date_short(),  # automatically efficient date labels
breaks = "1 month")
by_day <- by_hour %>%
dplyr::group_by(Cidade, date) %>%
dplyr::summarize(umid = mean(umid, na.rm = T)) %>%
left_join(by_hour[,c(1,2,15)], ., by = c('Cidade', 'date')) %>%
mutate(Date = ymd(date) + hours(12))
by_day <- by_hour %>%
dplyr::group_by(Cidade, date) %>%
dplyr::summarize(umid = mean(umid, na.rm = T)) %>%
left_join(by_hour[,c(1,2,15)], ., by = c('Cidade', 'date')) %>%
mutate(Date = ymd(date) + hours(12))
by_hour <-  meteo %>%
mutate(date = Date) %>%
left_join(data_thermo_agg, ., by = c("Cidade", "date")) %>%
mutate(date = as.Date(Date, tz = "America/Sao_Paulo"))  %>%
subset(., between(date,
as.Date(input$start_date2, tz = "America/Sao_Paulo"),
as.Date(input$end_date2, tz = "America/Sao_Paulo"))) %>%
left_join(., thermo_localizacao, by = "Cidade")
meteo %>%
mutate(date = Date) %>%
left_join(data_thermo_agg, ., by = c("Cidade", "date")) %>%
mutate(date = as.Date(Date, tz = "America/Sao_Paulo"))
meteo %>%
mutate(date = Date) %>%
left_join(data_thermo_agg, ., by = c("Cidade", "date")) %>%
mutate(date = as.Date(Date, tz = "America/Sao_Paulo"))  %>%
subset(., between(date,
as.Date(input$start_date2, tz = "America/Sao_Paulo"),
as.Date(input$end_date2, tz = "America/Sao_Paulo")))
mydata <- Datafinal %>%
filter(Year==input$years, Cidade==input$Cities) %>%
select(Cidade:PM2.5)
mydata.rcorr = rcorr(as.matrix(mydata))
View(Datafinal)
mydata.rcorr = rcorr(as.matrix(mydata))
mydata.coeff = mydata.rcorr$r
library(shiny)
library(shinydashboard)
library(shinythemes)
library(shinycssloaders)
library(jsonlite)
library(DT)
library(data.table)
library(leaflet)
library(leaflegend)
library(Hmisc)
library(corrplot)
library(PerformanceAnalytics)
library(ggplot2)
library(RColorBrewer)
library(data.table)
library(tidyverse)
library(devtools)
library(openair)
library(openairmaps)
library(dplyr)
library(zoo)
Datafinal <- air_quality_data %>%
# UNIT CONVERSION: https://www.breeze-technologies.de/blog/air-pollution-how-to-convert-between-mgm3-%C2%B5gm3-ppm-ppb/
mutate(CO = CO*1.15, #from ppm to mg/m³
O3 = O3*1.96, #from ppb to ug/m³
NO2 = NO2*1.88, #from ppb to ug/m³
SO2 = SO2*2.62, #from ppb to ug/m³
PM2.5 = PM2.5, # ug/m³
PM10 = PM10) #ug/m³
names(Datafinal)[names(Datafinal) == 'sample_day'] <- 'Date'
##### LOCATION: adding lat and long ----
Datafinal <- left_join(Datafinal, thermo_localizacao, by = "Cidade")
##### SELECTION VARIABLES: adding input ----
Datafinal <- mutate(Datafinal, Year = format(Date,"%Y"))
Year <- unique(Datafinal$Year)
Cidade <- unique(Datafinal$Cidade)
mydata <- Datafinal %>%
filter(Year==input$years, Cidade==input$Cities) %>%
select(Cidade:PM2.5)
mydata.rcorr = rcorr(as.matrix(mydata))
mydata2 <- Datafinal %>% filter(Year==input$years, Cidade==input$Cities)
mydata <- mydata2[,c(3:8)]
mydata.rcorr = rcorr(as.matrix(mydata))
mydata.coeff = mydata.rcorr$r
corrplot(mydata.coeff,method="number")
runApp('myapp')
View(Datafinal)
mydata2 <- data_thermo_agg %>%
mutate(Year = format(Date,"%Y")) %>%
filter(Year==input$years, Cidade==input$Cities)
mydata2 <- data_thermo_agg %>%
mutate(Year = format(date,"%Y")) %>%
filter(Year==input$years, Cidade==input$Cities)
mydata <- mydata2[,c(3:8)]
mydata.rcorr = rcorr(as.matrix(mydata))
mydata.coeff = mydata.rcorr$r
corrplot(mydata.coeff,method="number")
runApp('myapp')
usethis::edit_r_environ()
library(rsconnect)
# a function to stop the script when one of the variables cannot be found. and to strip quotation marks from the secrets when you supplied them. (maybe it is just easier to never use them)
error_on_missing_name <- function(name){
var <- Sys.getenv(name, unset=NA)
if(is.na(var)){
stop(paste0("cannot find ",name, " !"),call. = FALSE)
}
gsub("\"", '',var)
}
# Authenticate
setAccountInfo(name = error_on_missing_name("SHINY_ACC_NAME"),
token = error_on_missing_name("TOKEN"),
secret = error_on_missing_name("SECRET"))
# Deploy the application.
deployApp(
appFiles = c("app.R" #, you can specify which files to deploy,
#or keep this NULL to deploy everything
),
appName = error_on_missing_name("MASTERNAME"),
appTitle = "shinyapplication")
# Deploy the application.
deployApp(
appFiles = c("app.R" #, you can specify which files to deploy,
#or keep this NULL to deploy everything
),
appName = error_on_missing_name("MASTERNAME"),
appTitle = "shinyapplication")
rlang::last_trace()
# Deploy the application.
deployApp(
appFiles = c("./myapp/app.R" #, you can specify which files to deploy,
#or keep this NULL to deploy everything
),
appName = error_on_missing_name("MASTERNAME"),
appTitle = "shinyapplication")
# Deploy the application.
deployApp(
appFiles = c("app.R" #, you can specify which files to deploy,
#or keep this NULL to deploy everything
),
appName = error_on_missing_name("MASTERNAME"),
appTitle = "shinyapplication")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
usethis::edit_r_environ()
# a function to stop the script when one of the variables cannot be found. and to strip quotation marks from the secrets when you supplied them. (maybe it is just easier to never use them)
error_on_missing_name <- function(name){
var <- Sys.getenv(name, unset=NA)
if(is.na(var)){
stop(paste0("cannot find ",name, " !"),call. = FALSE)
}
gsub("\"", '',var)
}
library(rsconnect)
# a function to stop the script when one of the variables cannot be found. and to strip quotation marks from the secrets when you supplied them. (maybe it is just easier to never use them)
error_on_missing_name <- function(name){
var <- Sys.getenv(name, unset=NA)
if(is.na(var)){
stop(paste0("cannot find ",name, " !"),call. = FALSE)
}
gsub("\"", '',var)
}
# Authenticate
setAccountInfo(name = error_on_missing_name("SHINY_ACC_NAME"),
token = error_on_missing_name("TOKEN"),
secret = error_on_missing_name("SECRET"))
# Deploy the application.
deployApp(
appFiles = c("app.R" #, you can specify which files to deploy,
#or keep this NULL to deploy everything
),
appName = error_on_missing_name("MASTERNAME"),
appTitle = "shinyapplication")
error_on_missing_name("SHINY_ACC_NAME")
# Deploy the application.
deployApp(
appFiles = c(NULL #, you can specify which files to deploy,
#or keep this NULL to deploy everything
),
appName = error_on_missing_name("MASTERNAME"),
appTitle = "shinyapplication")
usethis::edit_r_environ()
library(rsconnect)
# a function to stop the script when one of the variables cannot be found. and to strip quotation marks from the secrets when you supplied them. (maybe it is just easier to never use them)
error_on_missing_name <- function(name){
var <- Sys.getenv(name, unset=NA)
if(is.na(var)){
stop(paste0("cannot find ",name, " !"),call. = FALSE)
}
gsub("\"", '',var)
}
# Authenticate
setAccountInfo(name = error_on_missing_name("SHINY_ACC_NAME"),
token = error_on_missing_name("TOKEN"),
secret = error_on_missing_name("SECRET"))
# Deploy the application.
deployApp(
appFiles = c(NULL #, you can specify which files to deploy,
#or keep this NULL to deploy everything
),
appName = error_on_missing_name("MASTERNAME"),
appTitle = "shinyapplication")
usethis::edit_r_environ()
library(rsconnect)
# a function to stop the script when one of the variables cannot be found. and to strip quotation marks from the secrets when you supplied them. (maybe it is just easier to never use them)
error_on_missing_name <- function(name){
var <- Sys.getenv(name, unset=NA)
if(is.na(var)){
stop(paste0("cannot find ",name, " !"),call. = FALSE)
}
gsub("\"", '',var)
}
# Authenticate
setAccountInfo(name = error_on_missing_name("SHINY_ACC_NAME"),
token = error_on_missing_name("TOKEN"),
secret = error_on_missing_name("SECRET"))
# Deploy the application.
deployApp(
appFiles = c(NULL #, you can specify which files to deploy,
#or keep this NULL to deploy everything
),
appName = error_on_missing_name("MASTERNAME"),
appTitle = "shinyapplication")
error_on_missing_name
source(deploy.R)
usethis::edit_r_environ()
library(rsconnect)
# a function to stop the script when one of the variables cannot be found. and to strip quotation marks from the secrets when you supplied them. (maybe it is just easier to never use them)
error_on_missing_name <- function(name){
var <- Sys.getenv(name, unset=NA)
if(is.na(var)){
stop(paste0("cannot find ",name, " !"),call. = FALSE)
}
gsub("\"", '',var)
}
# Authenticate
setAccountInfo(name = error_on_missing_name("SHINY_ACC_NAME"),
token = error_on_missing_name("TOKEN"),
secret = error_on_missing_name("SECRET"))
# Deploy the application.
deployApp(
appFiles = c(NULL #, you can specify which files to deploy,
#or keep this NULL to deploy everything
),
appName = error_on_missing_name("MASTERNAME"),
appTitle = "shinyapplication")
oauth_endpoints("github")
library(rvest)
library(httr)
oauth_endpoints("github")
github_api <- oauth_endpoint(request   = NULL,
authorize =  "https://github.com/login/oauth/authorize",
access    = "https://github.com/login/oauth/access_token",
base_url  =  "https://github.com/login/oauth")
app <- oauth_app("rmcqualidadedoar",
key = "38BF81C410654F4CACDAE71272D212134F6A4CE7F5C336DF",
secret = "2pMA9bQ8O0iMeb6sxUZnVC1bQLXdjEFnfIGbZOKA")
API_token <- oauth2.0_token(github_api,app)
API_token <- oauth2.0_token(github_api,app)
request <- GET("https://api.github.com/rate_limit", config(token = API_token))
request <- GET("https://api.github.com/rate_limit", config(token = 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
))
request <- GET("https://api.github.com/rate_limit", config(token = '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'))
API_token <- oauth2.0_token(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
,app)
devtools::source_url("https://www.kaggle.com/datasets/jessicajcss/rmc-dados-qualidade-do-ar/data?select=00-data_wrangling_thermo.R")
usethis::edit_r_environ()
usethis::edit_r_environ()
install.packages("shinyauthr")
# login with user1 pass1 or user2 pass2
shinyauthr::runExample("basic")
shinyauthr::runExample("shinydashboard")
shinyauthr::runExample("navbarPage")
oauth_endpoints("github")
library(httr)
oauth_endpoints("github")
usethis::edit_r_environ()
# a function to stop the script when one of the variables cannot be found. and to strip quotation marks from the secrets when you supplied them. (maybe it is just easier to never use them)
error_on_missing_name <- function(name){
var <- Sys.getenv(name, unset=NA)
if(is.na(var)){
stop(paste0("cannot find ",name, " !"),call. = FALSE)
}
gsub("\"", '',var)
}
# Authenticate
setAccountInfo(name = error_on_missing_name("SHINY_ACC_NAME"),
token = error_on_missing_name("TOKEN"),
secret = error_on_missing_name("SECRET"))
library(rsconnect)
# a function to stop the script when one of the variables cannot be found. and to strip quotation marks from the secrets when you supplied them. (maybe it is just easier to never use them)
error_on_missing_name <- function(name){
var <- Sys.getenv(name, unset=NA)
if(is.na(var)){
stop(paste0("cannot find ",name, " !"),call. = FALSE)
}
gsub("\"", '',var)
}
# Authenticate
setAccountInfo(name = error_on_missing_name("SHINY_ACC_NAME"),
token = error_on_missing_name("TOKEN"),
secret = error_on_missing_name("SECRET"))
# Deploy the application.
deployApp(
appFiles = c(NULL #, you can specify which files to deploy,
#or keep this NULL to deploy everything
),
appName = error_on_missing_name("MASTERNAME"),
appTitle = "shinyapplication")
