xlab="Data",ylab="Concentração (ug/m³)")
week_Cidade[, c(1,2)]
input <- data.frame(1)
input <- input %>%
mutate(years = 2023,
Cities = "Rio Branco do Sul",
Cities1 = "Rio Branco do Sul",
select_date = as.Date("2023-08-10"),
start_date = as.Date("2023-08-04"),
end_date = Sys.Date(),
Poluente = "PM10")
input <- input %>%
mutate(years = 2023,
Cities = "Rio Branco do Sul",
Cities1 = "Rio Branco do Sul",
select_date = as.Date("2023-08-10"),
start_date = as.Date("2023-08-04"),
end_date = Sys.Date(),
Poluente = "PM10")
<- week_Cidade[, c(1,2)]
x    <- week_Cidade[, c(1,2)]
color <- "green"
y    <- week_Cidade2[, c(1,2)]
Datafinal$Date <- as.Date(Datafinal$Date)
week_new <- Datafinal[,c(1:8)]
week_new <- subset(week_new,between(Date, as.Date(input$start_date), as.Date(input$end_date)))
View(week_new)
week_Cidade <- subset(week_new,Cidade==input$Cities1) %>%
group_by(Date) %>%
summarise_at(vars(SO2:PM2.5), mean, na.rm = TRUE)
week_Cidade2 <- subset(week_new,Cidade!=input$Cities1) %>%
group_by(Date) %>%
summarise_at(vars(SO2:PM2.5), mean, na.rm = TRUE)
x    <- week_Cidade[, c(1,2)]
color <- "green"
y    <- week_Cidade2[, c(1,2)]
plot(x,type="b",lwd=2,
xaxt="n", ylim=c(0, max(Datafinal[input$Poluente], na.rm = T)),
col=color,
xlab="Data",ylab="Concentração (ug/m³)")
lines(y,col="black",type = "b",lwd=2)
max(Datafinal[input$Poluente], na.rm = T)
summary(Datafinal[input$Poluente]
)
runGist("41f1670fb03e5af65e56429638166bcb")
x    <- week_Cidade[, c(1,7)]
color <- "green"
y    <- week_Cidade2[, c(1,7)]
plot(x,type="b",lwd=2,
xaxt="n", ylim=c(0, summary(Datafinal[input$Poluente], na.rm = T)),
col=color,
xlab="Data",ylab="Concentração (ug/m³)")
runGist("41f1670fb03e5af65e56429638166bcb")
#saving shinyapp as app.R into myapp folder to generate an HTML shiny app 'inside' Github.
shinylive::export(appdir = "myapp", destdir = "docs")
# https://github.com/RamiKrispin/shinylive-r
install.packages(c("shinylive", "httpuv"))
library(shiny)
#saving shinyapp as app.R into myapp folder to generate an HTML shiny app 'inside' Github.
shinylive::export(appdir = "myapp", destdir = "docs")
# checking
httpuv::runStaticServer("docs/", port=8008)
httpuv::runStaticServer("docs")
runApp('myapp')
runApp('myapp')
meteo <- read.csv("https://raw.githubusercontent.com/jessicajcss/Shiny_RMC/main/data/meteo_hour.csv")
meteo <- meteo %>%
mutate(data = ifelse(str_detect(date, ":00"),
as.character(date),
paste(as.character(date), "00:00:00", sep = " "))) %>%
select(-date, -Local) %>%
subset(site == "Rio Branco do Sul" | site == "Colombo") %>%
rename(date = data,
Cidade = site)  %>%
mutate(date = as_datetime(date),
Cidade = case_when(Cidade == "Colombo" ~ "Almirante Tamandaré",
TRUE ~ Cidade))
week_new <- left_join(data_thermo_agg, meteo, by = c("Cidade", "date"))
week_new <- week_new %>% mutate(Date = as.Date(date))
week_new <- subset(week_new, between(Date, as.Date(input$start_date), as.Date(input$end_date)))
input <- data.frame(1)
input <- input %>%
mutate(years = 2023,
Cities = "Rio Branco do Sul",
Cities1 = "Rio Branco do Sul",
select_date = as.Date("2023-08-10"),
start_date = as.Date("2023-08-04"),
end_date = Sys.Date(),
Poluente = "PM10")
week_new <- subset(week_new, between(Date, as.Date(input$start_date), as.Date(input$end_date)))
thermo_localizacao <- localizacao %>%
subset((Local == "Defesa Civil" | Local == "Prefeitura") & Tipo == 'outdoor') %>%
subset(Cidade == "Almirante Tamandaré" | Cidade == "Rio Branco do Sul") %>%
select(Cidade, Lat, Long)
localizacao <- read.csv("https://raw.githubusercontent.com/jessicajcss/Shiny_RMC/main/data/locais_sensores.csv",
sep = ";")
thermo_localizacao <- localizacao %>%
subset((Local == "Defesa Civil" | Local == "Prefeitura") & Tipo == 'outdoor') %>%
subset(Cidade == "Almirante Tamandaré" | Cidade == "Rio Branco do Sul") %>%
select(Cidade, Lat, Long)
colnames(thermo_localizacao) <- c('Cidade', 'Latitude', 'Longitude')
week_new <- left_join(week_new, thermo_localizacao, by = "Cidade")
polarMap(week_new,
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude",
provider = "CartoDB.Positron")
polarMap(week_new,
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude") %>%
addLayersControl(
baseGroups = c(
"OpenStreetMap", "Stamen.Toner",
"Stamen.Terrain", "Esri.WorldStreetMap",
"Wikimedia", "CartoDB.Positron", "Esri.WorldImagery"
),
# position it on the topleft
position = "topleft"
)
polarMap(week_new,
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude") addProviderTiles(
polarMap(week_new,
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude") %>%
addProviderTiles(
"OpenStreetMap",
# give the layer a name
group = "OpenStreetMap"
) %>%
addProviderTiles(
"Stamen.Toner",
group = "Stamen.Toner"
) %>%
addProviderTiles(
"Stamen.Terrain",
group = "Stamen.Terrain"
) %>%
addProviderTiles(
"Esri.WorldStreetMap",
group = "Esri.WorldStreetMap"
) %>%
addProviderTiles(
"Wikimedia",
group = "Wikimedia"
) %>%
addProviderTiles(
"CartoDB.Positron",
group = "CartoDB.Positron"
) %>%
addProviderTiles(
"Esri.WorldImagery",
group = "Esri.WorldImagery"
) %>%
addLayersControl(
baseGroups = c(
"OpenStreetMap", "Stamen.Toner",
"Stamen.Terrain", "Esri.WorldStreetMap",
"Wikimedia", "CartoDB.Positron", "Esri.WorldImagery"
),
# position it on the topleft
position = "topleft"
)
polarMap(week_new,
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude") %>%
addProviderTiles(
"OpenStreetMap",
# give the layer a name
group = "OpenStreetMap"
) %>%
addProviderTiles(
"Stamen.Toner",
group = "Stamen.Toner"
) %>%
addProviderTiles(
"Stamen.Terrain",
group = "Stamen.Terrain"
) %>%
addProviderTiles(
"Esri.WorldStreetMap",
group = "Esri.WorldStreetMap"
) %>%
addProviderTiles(
"Wikimedia",
group = "Wikimedia"
) %>%
addProviderTiles(
"CartoDB.Positron",
group = "CartoDB.Positron"
) %>%
addProviderTiles(
"Esri.WorldImagery",
group = "Esri.WorldImagery"
) %>%
addLayersControl(
baseGroups = c(
"OpenStreetMap", "Stamen.Toner",
"Stamen.Terrain", "Esri.WorldStreetMap",
"Wikimedia", "CartoDB.Positron", "Esri.WorldImagery"
),
# position it on the topleft
position = "topleft"
)
polarMap(week_new,
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude") %>%
addProviderTiles(
"OpenStreetMap",
# give the layer a name
group = "OpenStreetMap"
) %>%
addProviderTiles(
"Wikimedia",
group = "Wikimedia"
) %>%
addProviderTiles(
"CartoDB.Positron",
group = "CartoDB.Positron"
) %>%
addProviderTiles(
"Esri.WorldImagery",
group = "Esri.WorldImagery"
) %>%
addLayersControl(
baseGroups = c(
"OpenStreetMap",  "Esri.WorldImagery",
"Wikimedia", "CartoDB.Positron"
),
# position it on the topleft
position = "topleft"
)
polarMap(week_new,
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude") %>%
addProviderTiles(
"OpenStreetMap",
# give the layer a name
group = "OpenStreetMap"
) %>%
addProviderTiles(
"Wikimedia",
group = "Wikimedia"
) %>%
addProviderTiles(
"CartoDB.Positron",
group = "CartoDB.Positron"
) %>%
addProviderTiles(
"Esri.WorldImagery",
group = "Esri.WorldImagery"
) %>%
addLayersControl(
baseGroups = c(
"OpenStreetMap",  "Esri.WorldImagery",
"Wikimedia", "CartoDB.Positron"
),
# position it on the topleft
position = "bottomleft"
)
polarMap(week_new,
statistic = "nwr",
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude",
provider = c("CartoDB.Positron", "Esri.WorldImagery")
}
polarMap(week_new,
statistic = "nwr",
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude",
provider = c("CartoDB.Positron", "Esri.WorldImagery"))
polarMap(week_new,
statistic = "nwr",
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude",
provider = "CartoDB.Positron")
polarMap(week_new,
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude",
popup = "site",) %>%
addProviderTiles(
"OpenStreetMap",
# give the layer a name
group = "OpenStreetMap"
) %>%
addProviderTiles(
"Wikimedia",
group = "Wikimedia"
) %>%
addProviderTiles(
"CartoDB.Positron",
group = "CartoDB.Positron"
) %>%
addProviderTiles(
"Esri.WorldImagery",
group = "Esri.WorldImagery"
) %>%
addLayersControl(
baseGroups = c(
"OpenStreetMap",  "Esri.WorldImagery",
"Wikimedia", "CartoDB.Positron"
),
# position it on the topleft
position = "bottomleft"
)
polarMap(week_new,
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude",
popup = "Cidade") %>%
addProviderTiles(
"OpenStreetMap",
# give the layer a name
group = "OpenStreetMap"
) %>%
addProviderTiles(
"Wikimedia",
group = "Wikimedia"
) %>%
addProviderTiles(
"CartoDB.Positron",
group = "CartoDB.Positron"
) %>%
addProviderTiles(
"Esri.WorldImagery",
group = "Esri.WorldImagery"
) %>%
addLayersControl(
baseGroups = c(
"OpenStreetMap",  "Esri.WorldImagery",
"Wikimedia", "CartoDB.Positron"
),
# position it on the topleft
position = "bottomleft"
)
polarMap(week_new,
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude",
popup = "Cidade",
key = T,
provider = "Esri.WorldImagery")
polarMap(week_new,
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude",
popup = "Cidade",
key = T,
provider = "OpenStreetMap")
polarMap(week_new,
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude",
popup = "Cidade",
key = T,
provider = "Wikimedia")
polarMap(week_new,
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude",
popup = "Cidade",
key = T,
provider = "OpenWeatherMap")
polarMap(week_new,
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude",
popup = "Cidade",
key = T,
provider = "CartoDB.Positron")
polarMap(week_new,
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude",
key = TRUE,
provider = "CartoDB.Positron")
polarMap(week_new,
statistic = "nwr",
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude",
key = TRUE,
provider = "CartoDB.Positron")
df <- data.frame(Latitute = c(-25.322265201285667 , -25.193976227163617),
Longitude = c(-49.1578184144157 , -49.311729610632256),
ticker = c("Colombo", "Rio Branco do Sul"),
Estação = c("Estação Meteorológica em Colombo", "Estação Meterológica em Rio Branco do Sul"))
IconSet <- awesomeIconList('Rio Branco do Sul' = makeAwesomeIcon(icon='cloud',
squareMarker = F,
library='glyphicon',
markerColor = 'red', iconColor = 'white'),
'Colombo' = makeAwesomeIcon(icon='cloud',
squareMarker = F,
library='glyphicon',
markerColor = 'green', iconColor = 'white'))
binPal <- colorFactor('black', df$Latitude)
localizacao <- localizacao %>%
mutate(site = as.factor("Local de Amostragem"))
df %>%
leaflet() %>%
addTiles() %>%
addAwesomeMarkers(lng = ~Longitude, lat = ~Latitute,
icon = ~IconSet[ticker],
label = ~ Estação) %>%
addCircleMarkers(lng = localizacao$Long, lat = localizacao$Lat,
group = localizacao$Cidade,
fillColor = "black",
color = "black",
#icon = awesome, # lookup from list based on ticker
label = ~ paste("Estação de Monitoramento:", localizacao$Local,"-", localizacao$Cidade)) %>%
addLegendFactor(
values = ~ localizacao$site,
pal = binPal,
#labels = "Locais de Amostragem",
title = "Pontos de Monitoramento",
opacity = 0.5,
position = "bottomleft") %>%
addLegendAwesomeIcon(iconSet = IconSet,
orientation = 'horizontal',
title = htmltools::tags$div(
style = 'font-size: 12px;',
'Estações Meteorológicas'),
labelStyle = 'font-size: 0px;',
position = 'bottomleft',
group = 'Horizontal Legend') %>%
addLayersControl(
overlayGroups = localizacao$Cidade,
options = layersControlOptions(collapsed = FALSE)
) %>%
addProviderTiles(
"CartoDB.Positron",
group = "CartoDB.Positron"
) %>%
addProviderTiles(
"Esri.WorldImagery",
group = "Esri.WorldImagery"
) %>%
# add a layers control
addLayersControl(
baseGroups = c(
"OpenStreetMap", "Stamen.Toner",
"Stamen.Terrain", "Esri.WorldStreetMap",
"Wikimedia", "CartoDB.Positron", "Esri.WorldImagery"
),
# position it on the topleft
position = "topleft"
)
df %>%
leaflet() %>%
addTiles() %>%
addAwesomeMarkers(lng = ~Longitude, lat = ~Latitute,
icon = ~IconSet[ticker],
label = ~ Estação) %>%
addCircleMarkers(lng = localizacao$Long, lat = localizacao$Lat,
group = localizacao$Cidade,
fillColor = "black",
color = "black",
#icon = awesome, # lookup from list based on ticker
label = ~ paste("Estação de Monitoramento:", localizacao$Local,"-", localizacao$Cidade)) %>%
addLegendFactor(
values = ~ localizacao$site,
pal = binPal,
#labels = "Locais de Amostragem",
title = "Pontos de Monitoramento",
opacity = 0.5,
position = "bottomleft") %>%
addLegendAwesomeIcon(iconSet = IconSet,
orientation = 'horizontal',
title = htmltools::tags$div(
style = 'font-size: 12px;',
'Estações Meteorológicas'),
labelStyle = 'font-size: 0px;',
position = 'bottomleft',
group = 'Horizontal Legend') %>%
addLayersControl(
overlayGroups = localizacao$Cidade,
options = layersControlOptions(collapsed = FALSE)
) %>%
addProviderTiles(
"CartoDB.Positron",
group = "CartoDB.Positron"
) %>%
addProviderTiles(
"Esri.WorldImagery",
group = "Esri.WorldImagery"
) %>%
# add a layers control
addLayersControl(
baseGroups = c("CartoDB.Positron", "Esri.WorldImagery"
),
# position it on the topleft
position = "bottomleft"
)
library(shiny)
runGist("41f1670fb03e5af65e56429638166bcb")
library(shiny); runApp('app_20240820.R')
runGist("41f1670fb03e5af65e56429638166bcb")
usethis::create_github_token()
runGist("41f1670fb03e5af65e56429638166bcb")
library(shiny)
runGist("41f1670fb03e5af65e56429638166bcb")
runGist("41f1670fb03e5af65e56429638166bcb")
