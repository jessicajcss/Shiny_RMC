max = max(value)) %>%
mutate(value = case_when(variable == "O3" ~ max8,
variable == "CO" ~ max8,
variable == "SO2" ~ max,
variable == "NO2" ~ max,
TRUE ~ avg)) %>%
unique() %>%
dplyr::select(Cidade, variable, sample_day, value) %>%
dcast(Cidade + sample_day ~ variable, value.var = "value") %>%
drop_na() %>%
dplyr::rowwise() %>%
mutate(AQI_SO2 = aqiFromSO2(SO2),
AQI_NO2 = aqiFromNO2(NO2),
AQI_O3 = aqiFromO3(O3),
AQI_CO = aqiFromCO(CO),
AQI_PM25 = aqiFromPM25(PM2.5),
AQI_PM10 = aqiFromPM10(PM10),
AQI = pmax(AQI_SO2, AQI_NO2, AQI_O3, AQI_CO, AQI_PM25, AQI_PM10),
AQI_Qualidade = AQI_Qualidade(AQI))
air_quality_data <- data %>%
select(Cidade, date, SO2, NO2, O3, CO, PM2.5, PM10) %>%
gather(key = variable, value = value, -c("Cidade", "date")) %>%
mutate(variable = factor(variable,
levels=c('SO2', 'NO2', 'O3', 'CO',
'PM10', 'PM2.5'))) %>%
group_by(Cidade, variable) %>%
mutate(Npoints = 1:n() - findInterval(date - hours(w), date),
Mean8 = rollapplyr(value, Npoints, mean, partial = TRUE, fill = NA)) %>% #https://stackoverflow.com/questions/75686593/rolling-mean-of-time-series-with-missing-dates-in-r
ungroup() %>%
mutate(sample_day = as.Date(date, format = "%Y-%m-%d"),
Mean8 = case_when(Npoints < 8 | (variable != "O3" & variable != "CO") ~ NA, TRUE ~ Mean8)) %>%
dplyr::select(-date, -Npoints) %>%
group_by(Cidade, sample_day, variable) %>%
summarise(avg = mean(value, na.rm = T),
max8 = max(Mean8),
max = max(value)) %>%
mutate(value = case_when(variable == "O3" ~ max8,
variable == "CO" ~ max8,
variable == "SO2" ~ max,
variable == "NO2" ~ max,
TRUE ~ avg)) %>%
unique() %>%
dplyr::select(Cidade, variable, sample_day, value) %>%
dcast(Cidade + sample_day ~ variable, value.var = "value") %>%
drop_na()
air_quality_data <- data %>%
select(Cidade, date, SO2, NO2, O3, CO, PM2.5, PM10) %>%
gather(key = variable, value = value, -c("Cidade", "date")) %>%
mutate(variable = factor(variable,
levels=c('SO2', 'NO2', 'O3', 'CO',
'PM10', 'PM2.5'))) %>%
group_by(Cidade, variable) %>%
mutate(Npoints = 1:n() - findInterval(date - hours(w), date),
Mean8 = rollapplyr(value, Npoints, mean, partial = TRUE, fill = NA)) %>% #https://stackoverflow.com/questions/75686593/rolling-mean-of-time-series-with-missing-dates-in-r
ungroup() %>%
mutate(sample_day = as.Date(date, format = "%Y-%m-%d"),
Mean8 = case_when(Npoints < 8 | (variable != "O3" & variable != "CO") ~ NA, TRUE ~ Mean8)) %>%
dplyr::select(-date, -Npoints) %>%
group_by(Cidade, sample_day, variable) %>%
summarise(avg = mean(value, na.rm = T),
max8 = max(Mean8),
max = max(value)) %>%
mutate(value = case_when(variable == "O3" ~ max8,
variable == "CO" ~ max8,
variable == "SO2" ~ max,
variable == "NO2" ~ max,
TRUE ~ avg)) %>%
unique() %>%
dplyr::select(Cidade, variable, sample_day, value) %>%
dcast(Cidade + sample_day ~ variable, value.var = "value") %>%
dplyr::rowwise() %>%
mutate(AQI_SO2 = aqiFromSO2(SO2),
AQI_NO2 = aqiFromNO2(NO2),
AQI_O3 = aqiFromO3(O3),
AQI_CO = aqiFromCO(CO),
AQI_PM25 = aqiFromPM25(PM2.5),
AQI_PM10 = aqiFromPM10(PM10),
AQI = pmax(AQI_SO2, AQI_NO2, AQI_O3, AQI_CO, AQI_PM25, AQI_PM10),
AQI_Qualidade = AQI_Qualidade(AQI))
#Adaptation of US EPA according to
## https://community.purpleair.com/t/how-to-calculate-the-us-epa-pm2-5-aqi/877/12
## https://document.airnow.gov/technical-assistance-document-for-the-reporting-of-daily-air-quailty.pdf
## Last update: 2024-08-23
library(tidyverse)
#  --------------------------------------------------------------------------------------------------------
#                                              AQI FUNCTIONS
#  --------------------------------------------------------------------------------------------------------
calcAQI <- function(Cp, Ih, Il, BPh, BPl) {
a <- (Ih - Il)
b <- (BPh - BPl)
c <- (Cp - BPl)
return(round((a/b) * c + Il))
}
#################### AQI_INDEX BY POLLUTANT
AQI_Qualidade <- function(aqi) {
#                                     AQI
# Good                               0 - 50   |
# Moderate                          51 - 100  |
# Unhealthy for Sensitive Groups   101 – 150  |
# Unhealthy                        151 – 200  |
# Very Unhealthy                   201 – 300  |
# Hazardous                        301 – 500  |
if (aqi > 200) {
return("Péssima")  # Hazardous
} else if (aqi > 200) {
return("Muito Ruim")  # Very Unhealthy
} else if (aqi > 150) {
return("Ruim")   # Unhealthy
} else if (aqi > 100) {
return("Ruim para grupos sensíveis")    # Unhealthy for Sensitive Groups
} else if (aqi > 50) {
return("Moderada")     # Moderate
} else if (aqi >= 0) {
return("Boa")            # Good
} else {
return(undefined)
}
}
#################### BY POLLUTANT
aqiFromPM25 <- function(pm) {
#                                     AQI         RAW PM2.5  (ug/m³, 24-hour)
# Good                               0 - 50   |  0.0 – 9.0
# Moderate                          51 - 100  |  9.1 – 35.4
# Unhealthy for Sensitive Groups   101 – 150  |  35.5 – 55.4
# Unhealthy                        151 – 200  |  55.5 – 125.4
# Very Unhealthy                   201 – 300  |  125.5 – 225.4
# Hazardous                        301 – 500  |  225.5 – 500.4
if (pm > 225.5) {
return(calcAQI(pm, 500, 301, 500.4, 225.5))  # Hazardous
} else if (pm > 125.5) {
return(calcAQI(pm, 300, 201, 225.4, 125.5))  # Very Unhealthy
} else if (pm > 55.5) {
return(calcAQI(pm, 200, 151, 125.4, 55.5))   # Unhealthy
} else if (pm > 35.5) {
return(calcAQI(pm, 150, 101, 55.4, 35.5))    # Unhealthy for Sensitive Groups
} else if (pm > 9.1) {
return(calcAQI(pm, 100, 51, 35.4, 9.1))     # Moderate
} else if (pm >= 0) {
return(calcAQI(pm, 50, 0, 9, 0))            # Good
} else {
return(undefined)
}
}
###########################################
aqiFromPM10 <- function(pm) {
#                                     AQI         RAW PM10 (ug/m³, 24-hour)
# Good                               0 - 50   |  0.0 – 54
# Moderate                          51 - 100  |  55 – 154
# Unhealthy for Sensitive Groups   101 – 150  |  155 – 254
# Unhealthy                        151 – 200  |  255 – 354
# Very Unhealthy                   201 – 300  |  355 – 424
# Hazardous                        301 – 500  |  425+
if (pm > 425) {
return(calcAQI(pm, 500, 301, 850, 425))  # Hazardous
} else if (pm > 355) {
return(calcAQI(pm, 300, 201, 424, 355))  # Very Unhealthy
} else if (pm > 255) {
return(calcAQI(pm, 200, 151, 354, 255))   # Unhealthy
} else if (pm > 155) {
return(calcAQI(pm, 150, 101, 254, 155))    # Unhealthy for Sensitive Groups
} else if (pm > 55) {
return(calcAQI(pm, 100, 51, 154, 55))     # Moderate
} else if (pm >= 0) {
return(calcAQI(pm, 50, 0, 54, 0))            # Good
} else {
return(undefined)
}
}
###########################################
aqiFromSO2 <- function(gas) {
#                                     AQI         RAW SO2 (ppb, 1-hour max 98th)
# Good                               0 - 50   |  0.0 – 35
# Moderate                          51 - 100  |  36 – 75
# Unhealthy for Sensitive Groups   101 – 150  |  76 – 185
# Unhealthy                        151 – 200  |  186 – 304
# Very Unhealthy                   201 – 300  |  305 – 604
# Hazardous                        301 – 500  |  605+
if (gas > 605) {
return(calcAQI(gas, 500, 301, 1210, 605))  # Hazardous
} else if (gas > 305) {
return(calcAQI(gas, 300, 201, 604, 305))  # Very Unhealthy
} else if (gas > 186) {
return(calcAQI(gas, 200, 151, 304, 186))   # Unhealthy
} else if (gas > 76) {
return(calcAQI(gas, 150, 101, 185, 76))    # Unhealthy for Sensitive Groups
} else if (gas > 36) {
return(calcAQI(gas, 100, 51, 75, 36))     # Moderate
} else if (gas >= 0) {
return(calcAQI(gas, 50, 0, 35, 0))            # Good
} else {
return(undefined)
}
}
###########################################
aqiFromNO2 <- function(gas) {
#                                     AQI         RAW NO2  (ppb, 1-hour max 98th)
# Good                               0 - 50   |  0.0 – 53
# Moderate                          51 - 100  |  54 – 100
# Unhealthy for Sensitive Groups   101 – 150  |  101 – 360
# Unhealthy                        151 – 200  |  361 – 649
# Very Unhealthy                   201 – 300  |  650 – 1249
# Hazardous                        301 – 500  |  1250+
if (gas > 1250) {
return(calcAQI(gas, 500, 301, 2498, 1250))  # Hazardous
} else if (gas > 650) {
return(calcAQI(gas, 300, 201, 1249, 650))  # Very Unhealthy
} else if (gas > 361) {
return(calcAQI(gas, 200, 151, 649, 361))   # Unhealthy
} else if (gas > 101) {
return(calcAQI(gas, 150, 101, 360, 101))    # Unhealthy for Sensitive Groups
} else if (gas > 54) {
return(calcAQI(gas, 100, 51, 100, 54))     # Moderate
} else if (gas >= 0) {
return(calcAQI(gas, 50, 0, 53, 0))            # Good
} else {
return(undefined)
}
}
###########################################
aqiFromCO <- function(gas) {
#                                     AQI         RAW CO   (ppm, 8-hour max 98th)
# Good                               0 - 50   |  0.0 – 4.4
# Moderate                          51 - 100  |  4.5 – 9.4
# Unhealthy for Sensitive Groups   101 – 150  |  9.5 – 12.4
# Unhealthy                        151 – 200  |  12.5 – 15.4
# Very Unhealthy                   201 – 300  |  15.5 – 30.4
# Hazardous                        301 – 500  |  30.5+
if (gas > 30.5) {
return(calcAQI(gas, 500, 301, 61, 30.5))  # Hazardous
} else if (gas > 15.5) {
return(calcAQI(gas, 300, 201, 30.4, 15.5))  # Very Unhealthy
} else if (gas > 12.5) {
return(calcAQI(gas, 200, 151, 15.4, 12.5))   # Unhealthy
} else if (gas > 9.4) {
return(calcAQI(gas, 150, 101, 12.4, 9.4))    # Unhealthy for Sensitive Groups
} else if (gas > 4.4) {
return(calcAQI(gas, 100, 51, 9.4, 4.4))     # Moderate
} else if (gas >= 0) {
return(calcAQI(gas, 50, 0, 4.4, 0))            # Good
} else {
return(undefined)
}
}
###########################################
aqiFromO3 <- function(gas) {
#                                     AQI         RAW O3  (ppb, 8-hour max 98th)
# Good                               0 - 50   |  0.000 - 54
# Moderate                          51 - 100  |  55 - 70
# Unhealthy for Sensitive Groups   101 – 150  |  71 – 85
# Unhealthy                        151 – 200  |  86 – 105
# Very Unhealthy                   201 – 300  |  106 – 200
# Hazardous                        301 – 500  |  201+
if (gas > 201) {
return(calcAQI(gas, 500, 301, 402, 201))  # Hazardous
} else if (gas > 106) {
return(calcAQI(gas, 300, 201, 200, 106))  # Very Unhealthy
} else if (gas > 86) {
return(calcAQI(gas, 200, 151, 105, 86))   # Unhealthy
} else if (gas > 71) {
return(calcAQI(gas, 150, 101, 85, 71))    # Unhealthy for Sensitive Groups
} else if (gas > 55) {
return(calcAQI(gas, 100, 51, 70, 55))     # Moderate
} else if (gas >= 0) {
return(calcAQI(gas, 50, 0, 54, 0))            # Good
} else {
return(undefined)
}
}
#  --------------------------------------------------------------------------------------------------------
#                                              READING THE FILES
#  --------------------------------------------------------------------------------------------------------
# dataset = dataaggfinal [file: thermo_insitu_RAWunit_hour.csv, script: 00-data_wrangling_thermo.R]
devtools::source_url("https://raw.githubusercontent.com/jessicajcss/Shiny_RMC/main/00-data_wrangling_thermo.R")
data <- dataaggfinal
#  --------------------------------------------------------------------------------------------------------
#                                              AQI Determination
#  --------------------------------------------------------------------------------------------------------
# Matching thermo data X legislation
library(dplyr)
library(zoo)
w <- 8
air_quality_data <- data %>%
select(Cidade, date, SO2, NO2, O3, CO, PM2.5, PM10) %>%
gather(key = variable, value = value, -c("Cidade", "date")) %>%
mutate(variable = factor(variable,
levels=c('SO2', 'NO2', 'O3', 'CO',
'PM10', 'PM2.5'))) %>%
group_by(Cidade, variable) %>%
mutate(Npoints = 1:n() - findInterval(date - hours(w), date),
Mean8 = rollapplyr(value, Npoints, mean, partial = TRUE, fill = NA)) %>% #https://stackoverflow.com/questions/75686593/rolling-mean-of-time-series-with-missing-dates-in-r
ungroup() %>%
mutate(sample_day = as.Date(date, format = "%Y-%m-%d"),
Mean8 = case_when(Npoints < 8 | (variable != "O3" & variable != "CO") ~ NA, TRUE ~ Mean8)) %>%
dplyr::select(-date, -Npoints) %>%
group_by(Cidade, sample_day, variable) %>%
summarise(avg = mean(value, na.rm = T),
max8 = max(Mean8),
max = max(value)) %>%
mutate(value = case_when(variable == "O3" ~ max8,
variable == "CO" ~ max8,
variable == "SO2" ~ max,
variable == "NO2" ~ max,
TRUE ~ avg)) %>%
unique() %>%
dplyr::select(Cidade, variable, sample_day, value) %>%
dcast(Cidade + sample_day ~ variable, value.var = "value") %>%
dplyr::rowwise() %>%
mutate(AQI_SO2 = aqiFromSO2(SO2),
AQI_NO2 = aqiFromNO2(NO2),
AQI_O3 = aqiFromO3(O3),
AQI_CO = aqiFromCO(CO),
AQI_PM25 = aqiFromPM25(PM2.5),
AQI_PM10 = aqiFromPM10(PM10),
AQI = pmax(AQI_SO2, AQI_NO2, AQI_O3, AQI_CO, AQI_PM25, AQI_PM10),
AQI_Qualidade = AQI_Qualidade(AQI))
air_quality_data <- data %>%
select(Cidade, date, SO2, NO2, O3, CO, PM2.5, PM10) %>%
gather(key = variable, value = value, -c("Cidade", "date")) %>%
mutate(variable = factor(variable,
levels=c('SO2', 'NO2', 'O3', 'CO',
'PM10', 'PM2.5'))) %>%
group_by(Cidade, variable) %>%
mutate(Npoints = 1:n() - findInterval(date - hours(w), date),
Mean8 = rollapplyr(value, Npoints, mean, partial = TRUE, fill = NA)) %>% #https://stackoverflow.com/questions/75686593/rolling-mean-of-time-series-with-missing-dates-in-r
ungroup() %>%
mutate(sample_day = as.Date(date, format = "%Y-%m-%d"),
Mean8 = case_when(Npoints < 8 | (variable != "O3" & variable != "CO") ~ NA, TRUE ~ Mean8)) %>%
dplyr::select(-date, -Npoints) %>%
group_by(Cidade, sample_day, variable) %>%
summarise(avg = mean(value, na.rm = T),
max8 = max(Mean8),
max = max(value)) %>%
mutate(value = case_when(variable == "O3" ~ max8,
variable == "CO" ~ max8,
variable == "SO2" ~ max,
variable == "NO2" ~ max,
TRUE ~ avg)) %>%
unique() %>%
dplyr::select(Cidade, variable, sample_day, value) %>%
dcast(Cidade + sample_day ~ variable, value.var = "value") #%>%
View(air_quality_data)
devtools::source_url("https://raw.githubusercontent.com/jessicajcss/Shiny_RMC/main/00-preprocessing_thermo_insitu_data.R")
# create detect outlier function
detect_outlier <- function (x) {
# calculate first percentile
Percentile1 <- quantile(x, probs=.05)
# calculate third percentile
Percentile3 <- quantile(x, probs=.95)
# calculate interpercentile range
IPR = Percentile3 - Percentile1
# return true or false
x > Percentile3 + (IPR * 1.5) | x < Percentile1 - (IPR * 1.5)
}
# create remove outlier function
remove_outlier <- function(dataframe, columns = names(dataframe)) {
# for loop to traverse in columns vector
for (col in columns) {
# remove observation if it satisfies outlier function
dataframe <- dataframe[!detect_outlier(dataframe[[col]]), ]
}
# return dataframe
print("Remove outliers")
print(dataframe)
}
data_thermo <- data_thermo %>%
mutate(date = force_tz(date, tz = "America/Sao_Paulo"))
library(tidyverse)
data_thermo <- data_thermo %>%
dplyr::group_by(Cidade) %>%
remove_outlier(., c('SO2', 'NO2', 'O3', 'CO', 'PM2.5','PM10'))
x <- 12 # data available x times per hour
h <- 1 # aggregate to every h hours
View(data_thermo)
meteo <- read.csv("https://raw.githubusercontent.com/jessicajcss/Shiny_RMC/main/data/meteo_hour.csv")
meteo <- meteo %>%
mutate(data = ifelse(str_detect(date, ":00"),
as.character(date),
paste(as.character(date), "00:00:00", sep = " "))) %>%
mutate(date = force_tz(date, tz = "America/Sao_Paulo"))
meteo <- read.csv("https://raw.githubusercontent.com/jessicajcss/Shiny_RMC/main/data/meteo_hour.csv")
meteo <- meteo %>%
mutate(data = ifelse(str_detect(date, ":00"),
as.character(date),
paste(as.character(date), "00:00:00", sep = " "))) %>%
mutate(data = force_tz(data, tz = "America/Sao_Paulo")) %>%
select(-date, -Local)
meteo <- meteo %>%
mutate(data = ifelse(str_detect(date, ":00"),
as.character(date),
paste(as.character(date), "00:00:00", sep = " ")))
meteo <- meteo %>%
mutate(data = ifelse(str_detect(date, ":00"),
as.character(date),
paste(as.character(date), "00:00:00", sep = " "))) %>%
select(-date, -Local) %>%
mutate(data = ymd_hms(data, tz = "America/Sao_Paulo"))
devtools::source_url("https://raw.githubusercontent.com/jessicajcss/Shiny_RMC/main/00-preprocessing_thermo_insitu_data.R")
# create detect outlier function
detect_outlier <- function (x) {
# calculate first percentile
Percentile1 <- quantile(x, probs=.05)
# calculate third percentile
Percentile3 <- quantile(x, probs=.95)
# calculate interpercentile range
IPR = Percentile3 - Percentile1
# return true or false
x > Percentile3 + (IPR * 1.5) | x < Percentile1 - (IPR * 1.5)
}
# create remove outlier function
remove_outlier <- function(dataframe, columns = names(dataframe)) {
# for loop to traverse in columns vector
for (col in columns) {
# remove observation if it satisfies outlier function
dataframe <- dataframe[!detect_outlier(dataframe[[col]]), ]
}
# return dataframe
print("Remove outliers")
print(dataframe)
}
data_thermo <- data_thermo %>%
mutate(date = force_tz(date, tz = "America/Sao_Paulo"))
library(tidyverse)
data_thermo <- data_thermo %>%
dplyr::group_by(Cidade) %>%
remove_outlier(., c('SO2', 'NO2', 'O3', 'CO', 'PM2.5','PM10'))
x <- 12 # data available x times per hour
h <- 1 # aggregate to every h hours
missing_dataagg <- data_thermo %>%
mutate(Cidade = as.factor(Cidade)) %>%
group_by(date = floor_date(date, '1 hour')) %>%
filter(!is.na(PM2.5))  %>%
count(Cidade, date) %>%
arrange(desc(n))
# which ones are missing >= 10 hours of data
too_many_missing <- missing_dataagg %>%
filter(n < x/2) %>%
mutate(LocalTime = paste(Cidade, date, sep = " "))
# remove missing data
dataagg <- data_thermo %>%
mutate(Cidade = as.factor(Cidade)) %>%
group_by(date = floor_date(date, '1 hour')) %>%
mutate(LocalTime = paste(Cidade, date, sep = " ")) %>%
filter(!(LocalTime %in% too_many_missing$LocalTime)) %>%
dplyr::select(-LocalTime) %>%
group_by(Cidade, date) %>%
summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE))) %>%
unique()
# Now fill up missing datetimes with NA
a <- seq(min(dataagg$date, na.rm = T),
max(dataagg$date, na.rm = T), by=paste(h,"hours"))
date <- a[seq(1, length(a), by=1)]
tdf <- as.data.frame(date)
tdf$Cidade <- "Rio Branco do Sul"
tdf2 <- tdf %>%
mutate(Cidade = "Almirante Tamandaré")
tdf3 <- rbind(tdf, tdf2)
dataaggfinal <- merge(dataagg, tdf3, by = c("Cidade", "date"), all.y = T)
rm(tdf, tdf2, tdf3)
# days with missing values
missing <- dataaggfinal %>%
mutate(datepaste = as.Date(date)) %>%
select(Cidade, datepaste, PM2.5) %>%
dplyr::group_by(Cidade, datepaste) %>%
filter(!is.na(PM2.5))  %>%
count(Cidade, datepaste) %>%
filter(n > 0) %>%
arrange(desc(n))
# which ones are missing >= 10 hours of data
too_many_missing <- missing %>%
filter(n >= 10) %>%
mutate(LocalTime = paste(Cidade, datepaste, sep = " "))
# remove missing data
dataaggfinal <- dataaggfinal %>%
mutate(LocalTime = paste(Cidade, date, sep = " ")) %>%
filter(!(LocalTime %in% too_many_missing$LocalTime)) %>%
dplyr::select(-LocalTime)
View(dataaggfinal)
avg_hour <- dataaggfinal %>%
mutate(hour = paste(format(as.POSIXct(date, tz = "America/Sao_Paulo"), format = "%H:%M:%S")),
hour = hms(hour),
Cidade = as.factor(Cidade)) %>%
dplyr::group_by(Cidade, hour) %>%
summarize(RHavg = mean(rh_sensor, na.rm = TRUE),
COavg = mean(CO, na.rm = TRUE),
O3avg = mean(O3, na.rm = TRUE),
NO2avg = mean(NO2, na.rm = TRUE),
SO2avg = mean(SO2, na.rm = TRUE),
PM2.5avg = mean(PM2.5, na.rm = TRUE),
PM10avg = mean(PM10, na.rm = TRUE))
dataaggfinal <- dataaggfinal %>%
mutate(hour = paste(format(as.POSIXct(date, tz = "America/Sao_Paulo"), format = "%H:%M:%S")),
hour = hms(hour)) %>%
left_join(avg_hour, by = c("Cidade", "hour")) %>%
mutate(rh_sensor = case_when(is.na(rh_sensor) ~ RHavg, TRUE ~ rh_sensor),
CO = case_when(is.na(CO) ~ COavg, TRUE ~ CO),
O3 = case_when(is.na(O3) ~ O3avg, TRUE ~ O3),
NO2 = case_when(is.na(NO2) ~ NO2avg, TRUE ~ NO2),
SO2 = case_when(is.na(SO2) ~ SO2avg, TRUE ~ SO2),
PM2.5 = case_when(is.na(PM2.5) ~ PM2.5avg, TRUE ~ PM2.5),
PM10 = case_when(is.na(PM10) ~ PM10avg, TRUE ~ PM10)) %>%
dplyr::select(Cidade, date, SO2, NO2, O3, CO, PM2.5, PM10, rh_sensor)
View(dataaggfinal)
dataaggfinal[, c(3:9)] <- data.frame(sapply(dataaggfinal[, c(3:9)],
function(x) ifelse(is.nan(x), NA, x)))
data_thermo_agg <- dataaggfinal %>%
# UNIT CONVERSION: https://www.breeze-technologies.de/blog/air-pollution-how-to-convert-between-mgm3-%C2%B5gm3-ppm-ppb/
mutate(CO = CO*1.15, #from ppm to mg/m³
O3 = O3*1.96, #from ppb to ug/m³
NO2 = NO2*1.88, #from ppb to ug/m³
SO2 = SO2*2.62, #from ppb to ug/m³
PM2.5 = PM2.5, # ug/m³
PM10 = PM10) #ug/m³
