# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = ~pal(AQI))
# gradient based on the AQI level
pal <- colorNumeric(palette = c("green","yellow","#cc0000"), domain = c(0,12))
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = ~pal(AQI))
# gradient based on the AQI level
pal <- colorNumeric(palette = c("green","yellow","#cc0000"), domain = c(0,50))
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = ~pal(AQI))
# gradient based on the AQI level
pal <- colorNumeric(palette = c("green","yellow","#cc0000"), domain = c(0,500))
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = ~pal(AQI))
# gradient based on the AQI level
devtools::install_github("becarioprecario/spatialkernel")
library(spatialkernel)
install.packages("spatialkernel")
library(spatialkernel)
# gradient based on the AQI level
pal <- colorRampPalette(c("green", "yellow", "red")) (6)
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = ~pal(AQI))
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = pal)
# gradient based on the AQI level
pal <- colorRampPalette(c("green", "yellow", "red")) (50)
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = pal)
# gradient based on the AQI level
pal <- colorRampPalette(c("green", "yellow", "red"))
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = pal)
# gradient based on the AQI level
pal <- colorRampPalette(c("green", "yellow", "red")) (10)
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = pal)
# gradient based on the AQI level
pal <- colorRampPalette(c("green", "yellow", "red")) (100)
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = pal)
# gradient based on the AQI level
pal <- colorRampPalette(c("green", "yellow", "red")) (10)
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = pal)
pal <- colorNumeric(
palette = "viridis",
domain = Day$AQI)
pal <- colorNumeric(
palette = "viridis",
domain = Day$AQI)
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = ~pal(AQI))
binpal <- colorBin("viridis", Day$AQI, 6, pretty = FALSE)
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = ~binpal(AQI))
binpal <- colorBin("viridis", Day$AQI, 6, pretty = FALSE)
binpal
binpal <- colorBin("viridis", Datafinal$AQI, 6, pretty = FALSE)
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = ~binpal(AQI))
pal <- colorNumeric(
palette = "viridis",
domain = Datafinal$AQI)
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = ~pal(AQI))
# gradient based on the AQI level
pal <- colorRampPalette(c("green", "yellow", "red")) (10)
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = ~pal(AQI))
# gradient based on the AQI level
pal <- colorNumeric(palette = c("green","yellow","#cc0000"), domain = c(0,500))
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = ~pal(AQI))
binpal <- colorBin("viridis", Datafinal$AQI, 50, pretty = FALSE)
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = ~binpal(AQI))
binpal <- colorBin("viridis", Datafinal$AQI, 500, pretty = FALSE)
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = ~binpal(AQI))
View(binpal)
binpal <- colorRampPalette(c("red","yellow","springgreen","royalblue"))
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = ~binpal(AQI))
palette <- colorRampPalette(c("red4", "red", "orange","yellow","springgreen","royalblue"))
binpal <- colorBin(
palette,
domain,
bins = 6,
reverse = TRUE)
binpal <- colorBin(
palette,
domain = c(0, 500)),
binpal <- colorBin(
palette,
domain = c(0, 500),
bins = 6,
reverse = TRUE)
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = ~binpal(AQI))
binpal <- colorBin(
palette,
domain = seq(c(0, 500, 50)),
bins = 6,
reverse = TRUE)
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = ~binpal(AQI))
palette <- colorRampPalette(c("red4", "red", "orange","yellow","yellow2","springgreen"))
binpal <- colorBin(
palette,
domain = Datafinal$AQI,
bins = 6,
reverse = TRUE)
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = ~binpal(AQI))
Datafinal$AQI %>% summary
View(Datafinal)
# gradient based on the AQI level
binpal <- colorBin("viridis", Datafinal$AQI, 6, pretty = FALSE)
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = ~binpal(AQI))
# gradient based on the AQI level
binpal <- colorBin("viridis", Datafinal$AQI, 6, pretty = FALSE, reverse = T)
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = ~binpal(AQI))
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = ~binpal(50))
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = ~binpal(100))
# sending the data to the leaflet map to be rendered
# the markers are provided the pallet colour
leaflet(data=Day) %>%
addTiles() %>%
addCircleMarkers(lat=~Latitude, lng =~Longitude,
radius = 20, popup = ~popup_Info, color = ~binpal(200))
Day <- filter(Datafinal,Datafinal$Date == input$select_date)
Day <- subset(Datafinal,Datafinal$Date == input$select_date)
df_base <- ggplot(data=Day, aes(x=Cidade, y=PM2.5, fill=AQI_Qualidade))
df_base + geom_col() + theme_classic()
Day <- subset(Datafinal,Datafinal$Date == input$select_date)
df_base <- ggplot(data=Day, aes(x=Cidade, y=PM10, fill=AQI_Qualidade))
df_base + geom_col() + theme_classic()
Day <- subset(Datafinal,Datafinal$Date == input$select_date)
df_base <- ggplot(data=Day, aes(x=Cidade, y=PM10, fill=AQI_Qualidade))
df_base + geom_col() + theme_classic()
Day <- subset(Datafinal,Datafinal$Date == input$select_date)
df_base <- ggplot(data=Day, aes(x=Cidade, y=PM2.5, fill=AQI_PM25))
df_base + geom_col() + theme_classic()
Day <- subset(Datafinal,Datafinal$Date == input$select_date)
df_base <- ggplot(data=Day, aes(x=Cidade, y=PM10, fill=AQI_PM10))
df_base + geom_col() + theme_classic()
Datafinal$Date <- as.Date(Datafinal$Date)
week_new <- Datafinal[,c(1:8)]
week_new <- filter(week_new,between(Date, as.Date(input$start_date), as.Date(input$end_date)))
week_Cidade <- filter(week_new,Cidade==input$Cities1) %>%
group_by(Date) %>%
summarise_at(vars(PM2.5:O3), mean, na.rm = TRUE)
week_Cidade2 <- filter(week_new,Cidade!=input$Cities1) %>%
group_by(Date) %>%
summarise_at(vars(PM2.5:O3), mean, na.rm = TRUE)
if(input$Poluente == "PM2.5") {x    <- week_Cidade[, c(1,2)]
color <- "green"
y    <- week_Cidade2[, c(1,2)]}
if(input$Poluente == "PM10") {x    <- week_Cidade[, c(1,3)]
color <- "brown"
y    <- week_Cidade2[, c(1,3)]}
if(input$Poluente == "NO2") {x    <- week_Cidade[, c(1,4)]
color <- "red"
y    <- week_Cidade2[, c(1,4)]}
if(input$Poluente == "CO") {x    <- week_Cidade[, c(1,5)]
color <- "blue"
y    <- week_Cidade2[, c(1,5)]}
if(input$Poluente == "SO2") {x    <- week_Cidade[, c(1,6)]
color <- "orange"
y    <- week_Cidade2[, c(1,6)]}
if(input$Poluente == "O3") {x    <- week_Cidade[, c(1,7)]
color <- "grey50"
y    <- week_Cidade2[, c(1,7)]}
plot(x,type="b",lwd=2,
xaxt="n", #ylim=c(0,500),
col=color,
xlab="Data",ylab="Concentração (ug/m³)")
lines(y,col="black",type = "b",lwd=2)
title(input$Cities1, col.main = color)
axis.Date(1,
at=seq(input$start_date, input$end_date, by="days"),
format = "%b %d \n %Y", cex.axis = .7)
#lines(week_Cidade$NO2,col="red",type="b",lwd=2)
#lines(week_Cidade$O3,col="grey",type="b",lwd=2)
#lines(week_Cidade$CO,col="blue",type = "b",lwd=2)
#lines(week_Cidade$PM2.5,col="green",type = "b",lwd=2)
#lines(week_Cidade$PM10,col="brown",type = "b",lwd=2)
legend("topright",
legend=c(expression(SO["2"]),
expression(NO["2"]),
expression(O["3"]),
"CO",
expression(MP["2,5"]),
expression(MP["10"])),
lty=5,lwd=4,pch=10,col=c("orange","red","grey50","blue","green","brown"),
ncol=2,bty="n",cex=0.8,
text.col=c("orange","red","grey50","blue","green","brown")
runApp('rmc_20240820/app_20240820.R')
runApp('rmc_20240820/app_20240820.R')
runApp('rmc_20240820/app_20240820.R')
runApp('rmc_20240820/app_20240820.R')
runApp('rmc_20240820/app_20240820.R')
runApp('rmc_20240820/app_20240820.R')
library(shiny); runApp('app_20240820.R')
source('./00-data_wrangling_thermo.R')
source('00-data_wrangling_thermo.R')
source('00-data_wrangling_thermo.R')
source('00-data_wrangling_thermo.R')
dir()
source("00-data_wrangling_thermo.R" )
source("./00-data_wrangling_thermo.R")
runApp('app_20240820.R')
runApp('app_20240820.R')
df <- data.frame(Latitute = c(-25.322265201285667 , -25.193976227163617),
Longitude = c(-49.1578184144157 , -49.311729610632256),
ticker = c("Colombo", "Rio Branco do Sul"),
Estação = c("Estação Meteorológica em Colombo", "Estação Meterológica em Rio Branco do Sul"))
IconSet <- awesomeIconList('Rio Branco do Sul' = makeAwesomeIcon(icon='cloud',
squareMarker = F,
library='glyphicon',
markerColor = 'red', iconColor = 'white'),
'Colombo' = makeAwesomeIcon(icon='cloud',
squareMarker = F,
library='glyphicon',
markerColor = 'green', iconColor = 'white'))
df %>%
leaflet() %>%
addTiles() %>%
addAwesomeMarkers(lng = ~Longitude, lat = ~Latitute,
icon = ~IconSet[ticker],
label = ~ Estação) %>%
addCircleMarkers(lng = localizacao$Long, lat = localizacao$Lat,
group = localizacao$Cidade,
fillColor = "black",
color = "black",
#icon = awesome, # lookup from list based on ticker
label = ~ paste("Estação de Monitoramento:", localizacao$Local,"-", localizacao$Cidade)) %>%
addLegendAwesomeIcon(iconSet = IconSet,
orientation = 'horizontal',
title = htmltools::tags$div(
style = 'font-size: 12px;',
'Estações Meteorológicas'),
labelStyle = 'font-size: 0px;',
position = 'bottomleft',
group = 'Horizontal Legend') %>%
addLayersControl(
overlayGroups = localizacao$Cidade,
options = layersControlOptions(collapsed = FALSE)
) %>%
addLegend(
colors = "black",
labels = "Locais de Amostragem",
title = "Pontos de Monitoramento",
opacity = 0.5,
position = "bottomleft")
library(leaflegend)
df <- data.frame(Latitute = c(-25.322265201285667 , -25.193976227163617),
Longitude = c(-49.1578184144157 , -49.311729610632256),
ticker = c("Colombo", "Rio Branco do Sul"),
Estação = c("Estação Meteorológica em Colombo", "Estação Meterológica em Rio Branco do Sul"))
IconSet <- awesomeIconList('Rio Branco do Sul' = makeAwesomeIcon(icon='cloud',
squareMarker = F,
library='glyphicon',
markerColor = 'red', iconColor = 'white'),
'Colombo' = makeAwesomeIcon(icon='cloud',
squareMarker = F,
library='glyphicon',
markerColor = 'green', iconColor = 'white'))
localizacao <- read.csv("./data/locais_sensores.csv",
sep = ";")
df %>%
leaflet() %>%
addTiles() %>%
addAwesomeMarkers(lng = ~Longitude, lat = ~Latitute,
icon = ~IconSet[ticker],
label = ~ Estação) %>%
addCircleMarkers(lng = localizacao$Long, lat = localizacao$Lat,
group = localizacao$Cidade,
fillColor = "black",
color = "black",
#icon = awesome, # lookup from list based on ticker
label = ~ paste("Estação de Monitoramento:", localizacao$Local,"-", localizacao$Cidade)) %>%
addLegendAwesomeIcon(iconSet = IconSet,
orientation = 'horizontal',
title = htmltools::tags$div(
style = 'font-size: 12px;',
'Estações Meteorológicas'),
labelStyle = 'font-size: 0px;',
position = 'bottomleft',
group = 'Horizontal Legend') %>%
addLayersControl(
overlayGroups = localizacao$Cidade,
options = layersControlOptions(collapsed = FALSE)
) %>%
addLegend(
colors = "black",
labels = "Locais de Amostragem",
title = "Pontos de Monitoramento",
opacity = 0.5,
position = "bottomleft")
df %>%
leaflet() %>%
addTiles() %>%
addAwesomeMarkers(lng = ~Longitude, lat = ~Latitute,
icon = ~IconSet[ticker],
label = ~ Estação)
df %>%
leaflet() %>%
addTiles() %>%
addAwesomeMarkers(lng = ~Longitude, lat = ~Latitute,
icon = ~IconSet[ticker],
label = ~ Estação)
binpal <- colorBin("increment", Datafinal$AQI, 6, pretty = FALSE, reverse = T)
colorBin("increment"
)
brewer.pal(6, "Spectral")
library(RColorBrewer)
brewer.pal(6, "Spectral")
colorBin("increment", Datafinal$AQI, 6, pretty = FALSE, reverse = T)
colorBin("increment"
)
runApp('app_20240820.R')
brewer.pal(6, "Spectral")
meteo <- read.csv("./data/meteo_hour.csv") %>%
mutate(data = ifelse(str_detect(date, ":00"),
as.character(date),
paste(as.character(date), "00:00:00", sep = " "))) %>%
select(-date, -Local) %>%
subset(site == "Rio Branco do Sul" | site == "Colombo") %>%
rename(date = data,
Cidade = site)  %>%
mutate(date = as_datetime(date),
Cidade = case_when(Cidade == "Colombo" ~ "Almirante Tamandaré",
TRUE ~ Cidade))
View(meteo)
week_new <- left_join(data_thermo_agg, meteo, by = c("Cidade", "date"))
week_new <- week_new %>% mutate(Date = as.Date(date))
week_new <- subset(week_new, between(Date, as.Date('2023-08-16'), as.Date('2023-08-30')))
polarMap(week_new,
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude",
provider = "CartoDB.Positron")
thermo_localizacao <- localizacao %>%
subset((Local == "Defesa Civil" | Local == "Prefeitura") & Tipo == 'outdoor') %>%
subset(Cidade == "Almirante Tamandaré" | Cidade == "Rio Branco do Sul") %>%
select(Cidade, Lat, Long)
colnames(thermo_localizacao) <- c('Cidade', 'Latitude', 'Longitude')
week_new <- left_join(week_new, thermo_localizacao, by = "Cidade")
polarMap(week_new,
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude",
provider = "CartoDB.Positron")
polarMap(week_new,
k = 50,
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude",
provider = "CartoDB.Positron")
polarMap(week_new,
k = 25,
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude",
provider = "CartoDB.Positron")
polarMap(week_new,
statistic = "nwr",
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude",
provider = "CartoDB.Positron")
week_new <- left_join(data_thermo_agg, meteo, by = c("Cidade", "date"))
week_new <- week_new %>% mutate(Date = as.Date(date))
week_new <- subset(week_new, between(Date, as.Date('2023-08-16'), as.Date('2023-09-30')))
thermo_localizacao <- localizacao %>%
subset((Local == "Defesa Civil" | Local == "Prefeitura") & Tipo == 'outdoor') %>%
subset(Cidade == "Almirante Tamandaré" | Cidade == "Rio Branco do Sul") %>%
select(Cidade, Lat, Long)
colnames(thermo_localizacao) <- c('Cidade', 'Latitude', 'Longitude')
week_new <- left_join(week_new, thermo_localizacao, by = "Cidade")
polarMap(week_new,
#statistic = "nwr",
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude",
provider = "CartoDB.Positron")
runApp('app_20240820.R')
brewer.pal(12, "Spectral")
brewer.pal(12, "increment")
brewer.pal(10, "Spectral")
# gradient based on the AQI level
binpal <- colorBin(c("#5F0FA2", "#814FA7", "#F46D43", "#FDAE61", "#FEE08B","#ABDDA4"),
Datafinal$AQI, 6, pretty = FALSE)
polarMap(week_new,
pollutant = c("SO2", "NO2", "O3", "CO", "PM2.5", "PM10"),
latitude = "Latitude",
longitude = "Longitude",
provider = "CartoDB.Positron")
View(week_new)
